
STM32F4_ADXL345_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002998  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002b20  08002b20  00012b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002b38  08002b38  00012b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002b40  08002b40  00012b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002b44  08002b44  00012b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08002b48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          0000008c  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000098  20000098  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00006a4e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000010ad  00000000  00000000  00026a8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000006b0  00000000  00000000  00027b38  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000638  00000000  00000000  000281e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00003388  00000000  00000000  00028820  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000023a8  00000000  00000000  0002bba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0002df50  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001b0c  00000000  00000000  0002dfcc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002b08 	.word	0x08002b08

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002b08 	.word	0x08002b08

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004dc:	4a0e      	ldr	r2, [pc, #56]	; (8000518 <HAL_Init+0x40>)
 80004de:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <HAL_Init+0x40>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004e8:	4a0b      	ldr	r2, [pc, #44]	; (8000518 <HAL_Init+0x40>)
 80004ea:	4b0b      	ldr	r3, [pc, #44]	; (8000518 <HAL_Init+0x40>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004f4:	4a08      	ldr	r2, [pc, #32]	; (8000518 <HAL_Init+0x40>)
 80004f6:	4b08      	ldr	r3, [pc, #32]	; (8000518 <HAL_Init+0x40>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000500:	2003      	movs	r0, #3
 8000502:	f000 f92d 	bl	8000760 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000506:	2000      	movs	r0, #0
 8000508:	f000 f808 	bl	800051c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800050c:	f002 f9f2 	bl	80028f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000510:	2300      	movs	r3, #0
}
 8000512:	4618      	mov	r0, r3
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40023c00 	.word	0x40023c00

0800051c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000524:	4b12      	ldr	r3, [pc, #72]	; (8000570 <HAL_InitTick+0x54>)
 8000526:	681a      	ldr	r2, [r3, #0]
 8000528:	4b12      	ldr	r3, [pc, #72]	; (8000574 <HAL_InitTick+0x58>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	4619      	mov	r1, r3
 800052e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000532:	fbb3 f3f1 	udiv	r3, r3, r1
 8000536:	fbb2 f3f3 	udiv	r3, r2, r3
 800053a:	4618      	mov	r0, r3
 800053c:	f000 f937 	bl	80007ae <HAL_SYSTICK_Config>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000546:	2301      	movs	r3, #1
 8000548:	e00e      	b.n	8000568 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	2b0f      	cmp	r3, #15
 800054e:	d80a      	bhi.n	8000566 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000550:	2200      	movs	r2, #0
 8000552:	6879      	ldr	r1, [r7, #4]
 8000554:	f04f 30ff 	mov.w	r0, #4294967295
 8000558:	f000 f90d 	bl	8000776 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800055c:	4a06      	ldr	r2, [pc, #24]	; (8000578 <HAL_InitTick+0x5c>)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000562:	2300      	movs	r3, #0
 8000564:	e000      	b.n	8000568 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000566:	2301      	movs	r3, #1
}
 8000568:	4618      	mov	r0, r3
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20000008 	.word	0x20000008
 8000574:	20000004 	.word	0x20000004
 8000578:	20000000 	.word	0x20000000

0800057c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000580:	4b06      	ldr	r3, [pc, #24]	; (800059c <HAL_IncTick+0x20>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	461a      	mov	r2, r3
 8000586:	4b06      	ldr	r3, [pc, #24]	; (80005a0 <HAL_IncTick+0x24>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4413      	add	r3, r2
 800058c:	4a04      	ldr	r2, [pc, #16]	; (80005a0 <HAL_IncTick+0x24>)
 800058e:	6013      	str	r3, [r2, #0]
}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	20000004 	.word	0x20000004
 80005a0:	20000030 	.word	0x20000030

080005a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  return uwTick;
 80005a8:	4b03      	ldr	r3, [pc, #12]	; (80005b8 <HAL_GetTick+0x14>)
 80005aa:	681b      	ldr	r3, [r3, #0]
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	20000030 	.word	0x20000030

080005bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005c4:	f7ff ffee 	bl	80005a4 <HAL_GetTick>
 80005c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005d4:	d005      	beq.n	80005e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005d6:	4b09      	ldr	r3, [pc, #36]	; (80005fc <HAL_Delay+0x40>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	461a      	mov	r2, r3
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	4413      	add	r3, r2
 80005e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005e2:	bf00      	nop
 80005e4:	f7ff ffde 	bl	80005a4 <HAL_GetTick>
 80005e8:	4602      	mov	r2, r0
 80005ea:	68bb      	ldr	r3, [r7, #8]
 80005ec:	1ad2      	subs	r2, r2, r3
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	429a      	cmp	r2, r3
 80005f2:	d3f7      	bcc.n	80005e4 <HAL_Delay+0x28>
  {
  }
}
 80005f4:	bf00      	nop
 80005f6:	3710      	adds	r7, #16
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000004 	.word	0x20000004

08000600 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	f003 0307 	and.w	r3, r3, #7
 800060e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000610:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <__NVIC_SetPriorityGrouping+0x44>)
 8000612:	68db      	ldr	r3, [r3, #12]
 8000614:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000616:	68ba      	ldr	r2, [r7, #8]
 8000618:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800061c:	4013      	ands	r3, r2
 800061e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000628:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800062c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000630:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000632:	4a04      	ldr	r2, [pc, #16]	; (8000644 <__NVIC_SetPriorityGrouping+0x44>)
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	60d3      	str	r3, [r2, #12]
}
 8000638:	bf00      	nop
 800063a:	3714      	adds	r7, #20
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr
 8000644:	e000ed00 	.word	0xe000ed00

08000648 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800064c:	4b04      	ldr	r3, [pc, #16]	; (8000660 <__NVIC_GetPriorityGrouping+0x18>)
 800064e:	68db      	ldr	r3, [r3, #12]
 8000650:	0a1b      	lsrs	r3, r3, #8
 8000652:	f003 0307 	and.w	r3, r3, #7
}
 8000656:	4618      	mov	r0, r3
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr
 8000660:	e000ed00 	.word	0xe000ed00

08000664 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	6039      	str	r1, [r7, #0]
 800066e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000674:	2b00      	cmp	r3, #0
 8000676:	db0a      	blt.n	800068e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000678:	490d      	ldr	r1, [pc, #52]	; (80006b0 <__NVIC_SetPriority+0x4c>)
 800067a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067e:	683a      	ldr	r2, [r7, #0]
 8000680:	b2d2      	uxtb	r2, r2
 8000682:	0112      	lsls	r2, r2, #4
 8000684:	b2d2      	uxtb	r2, r2
 8000686:	440b      	add	r3, r1
 8000688:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800068c:	e00a      	b.n	80006a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068e:	4909      	ldr	r1, [pc, #36]	; (80006b4 <__NVIC_SetPriority+0x50>)
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	f003 030f 	and.w	r3, r3, #15
 8000696:	3b04      	subs	r3, #4
 8000698:	683a      	ldr	r2, [r7, #0]
 800069a:	b2d2      	uxtb	r2, r2
 800069c:	0112      	lsls	r2, r2, #4
 800069e:	b2d2      	uxtb	r2, r2
 80006a0:	440b      	add	r3, r1
 80006a2:	761a      	strb	r2, [r3, #24]
}
 80006a4:	bf00      	nop
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr
 80006b0:	e000e100 	.word	0xe000e100
 80006b4:	e000ed00 	.word	0xe000ed00

080006b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b089      	sub	sp, #36	; 0x24
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	f003 0307 	and.w	r3, r3, #7
 80006ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006cc:	69fb      	ldr	r3, [r7, #28]
 80006ce:	f1c3 0307 	rsb	r3, r3, #7
 80006d2:	2b04      	cmp	r3, #4
 80006d4:	bf28      	it	cs
 80006d6:	2304      	movcs	r3, #4
 80006d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006da:	69fb      	ldr	r3, [r7, #28]
 80006dc:	3304      	adds	r3, #4
 80006de:	2b06      	cmp	r3, #6
 80006e0:	d902      	bls.n	80006e8 <NVIC_EncodePriority+0x30>
 80006e2:	69fb      	ldr	r3, [r7, #28]
 80006e4:	3b03      	subs	r3, #3
 80006e6:	e000      	b.n	80006ea <NVIC_EncodePriority+0x32>
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006ec:	2201      	movs	r2, #1
 80006ee:	69bb      	ldr	r3, [r7, #24]
 80006f0:	fa02 f303 	lsl.w	r3, r2, r3
 80006f4:	1e5a      	subs	r2, r3, #1
 80006f6:	68bb      	ldr	r3, [r7, #8]
 80006f8:	401a      	ands	r2, r3
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006fe:	2101      	movs	r1, #1
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	fa01 f303 	lsl.w	r3, r1, r3
 8000706:	1e59      	subs	r1, r3, #1
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800070c:	4313      	orrs	r3, r2
         );
}
 800070e:	4618      	mov	r0, r3
 8000710:	3724      	adds	r7, #36	; 0x24
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
	...

0800071c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	3b01      	subs	r3, #1
 8000728:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800072c:	d301      	bcc.n	8000732 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800072e:	2301      	movs	r3, #1
 8000730:	e00f      	b.n	8000752 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000732:	4a0a      	ldr	r2, [pc, #40]	; (800075c <SysTick_Config+0x40>)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	3b01      	subs	r3, #1
 8000738:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800073a:	210f      	movs	r1, #15
 800073c:	f04f 30ff 	mov.w	r0, #4294967295
 8000740:	f7ff ff90 	bl	8000664 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000744:	4b05      	ldr	r3, [pc, #20]	; (800075c <SysTick_Config+0x40>)
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800074a:	4b04      	ldr	r3, [pc, #16]	; (800075c <SysTick_Config+0x40>)
 800074c:	2207      	movs	r2, #7
 800074e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000750:	2300      	movs	r3, #0
}
 8000752:	4618      	mov	r0, r3
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	e000e010 	.word	0xe000e010

08000760 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000768:	6878      	ldr	r0, [r7, #4]
 800076a:	f7ff ff49 	bl	8000600 <__NVIC_SetPriorityGrouping>
}
 800076e:	bf00      	nop
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}

08000776 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000776:	b580      	push	{r7, lr}
 8000778:	b086      	sub	sp, #24
 800077a:	af00      	add	r7, sp, #0
 800077c:	4603      	mov	r3, r0
 800077e:	60b9      	str	r1, [r7, #8]
 8000780:	607a      	str	r2, [r7, #4]
 8000782:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000784:	2300      	movs	r3, #0
 8000786:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000788:	f7ff ff5e 	bl	8000648 <__NVIC_GetPriorityGrouping>
 800078c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800078e:	687a      	ldr	r2, [r7, #4]
 8000790:	68b9      	ldr	r1, [r7, #8]
 8000792:	6978      	ldr	r0, [r7, #20]
 8000794:	f7ff ff90 	bl	80006b8 <NVIC_EncodePriority>
 8000798:	4602      	mov	r2, r0
 800079a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800079e:	4611      	mov	r1, r2
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff ff5f 	bl	8000664 <__NVIC_SetPriority>
}
 80007a6:	bf00      	nop
 80007a8:	3718      	adds	r7, #24
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}

080007ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007ae:	b580      	push	{r7, lr}
 80007b0:	b082      	sub	sp, #8
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007b6:	6878      	ldr	r0, [r7, #4]
 80007b8:	f7ff ffb0 	bl	800071c <SysTick_Config>
 80007bc:	4603      	mov	r3, r0
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
	...

080007c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b089      	sub	sp, #36	; 0x24
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80007d2:	2300      	movs	r3, #0
 80007d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80007d6:	2300      	movs	r3, #0
 80007d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80007da:	2300      	movs	r3, #0
 80007dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007de:	2300      	movs	r3, #0
 80007e0:	61fb      	str	r3, [r7, #28]
 80007e2:	e16b      	b.n	8000abc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80007e4:	2201      	movs	r2, #1
 80007e6:	69fb      	ldr	r3, [r7, #28]
 80007e8:	fa02 f303 	lsl.w	r3, r2, r3
 80007ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	681a      	ldr	r2, [r3, #0]
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	4013      	ands	r3, r2
 80007f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80007f8:	693a      	ldr	r2, [r7, #16]
 80007fa:	697b      	ldr	r3, [r7, #20]
 80007fc:	429a      	cmp	r2, r3
 80007fe:	f040 815a 	bne.w	8000ab6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	685b      	ldr	r3, [r3, #4]
 8000806:	2b01      	cmp	r3, #1
 8000808:	d00b      	beq.n	8000822 <HAL_GPIO_Init+0x5a>
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	2b02      	cmp	r3, #2
 8000810:	d007      	beq.n	8000822 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000816:	2b11      	cmp	r3, #17
 8000818:	d003      	beq.n	8000822 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	685b      	ldr	r3, [r3, #4]
 800081e:	2b12      	cmp	r3, #18
 8000820:	d130      	bne.n	8000884 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	689b      	ldr	r3, [r3, #8]
 8000826:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000828:	69fb      	ldr	r3, [r7, #28]
 800082a:	005b      	lsls	r3, r3, #1
 800082c:	2203      	movs	r2, #3
 800082e:	fa02 f303 	lsl.w	r3, r2, r3
 8000832:	43db      	mvns	r3, r3
 8000834:	69ba      	ldr	r2, [r7, #24]
 8000836:	4013      	ands	r3, r2
 8000838:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	68da      	ldr	r2, [r3, #12]
 800083e:	69fb      	ldr	r3, [r7, #28]
 8000840:	005b      	lsls	r3, r3, #1
 8000842:	fa02 f303 	lsl.w	r3, r2, r3
 8000846:	69ba      	ldr	r2, [r7, #24]
 8000848:	4313      	orrs	r3, r2
 800084a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	69ba      	ldr	r2, [r7, #24]
 8000850:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000858:	2201      	movs	r2, #1
 800085a:	69fb      	ldr	r3, [r7, #28]
 800085c:	fa02 f303 	lsl.w	r3, r2, r3
 8000860:	43db      	mvns	r3, r3
 8000862:	69ba      	ldr	r2, [r7, #24]
 8000864:	4013      	ands	r3, r2
 8000866:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	091b      	lsrs	r3, r3, #4
 800086e:	f003 0201 	and.w	r2, r3, #1
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	fa02 f303 	lsl.w	r3, r2, r3
 8000878:	69ba      	ldr	r2, [r7, #24]
 800087a:	4313      	orrs	r3, r2
 800087c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	69ba      	ldr	r2, [r7, #24]
 8000882:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	68db      	ldr	r3, [r3, #12]
 8000888:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800088a:	69fb      	ldr	r3, [r7, #28]
 800088c:	005b      	lsls	r3, r3, #1
 800088e:	2203      	movs	r2, #3
 8000890:	fa02 f303 	lsl.w	r3, r2, r3
 8000894:	43db      	mvns	r3, r3
 8000896:	69ba      	ldr	r2, [r7, #24]
 8000898:	4013      	ands	r3, r2
 800089a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	689a      	ldr	r2, [r3, #8]
 80008a0:	69fb      	ldr	r3, [r7, #28]
 80008a2:	005b      	lsls	r3, r3, #1
 80008a4:	fa02 f303 	lsl.w	r3, r2, r3
 80008a8:	69ba      	ldr	r2, [r7, #24]
 80008aa:	4313      	orrs	r3, r2
 80008ac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	69ba      	ldr	r2, [r7, #24]
 80008b2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	2b02      	cmp	r3, #2
 80008ba:	d003      	beq.n	80008c4 <HAL_GPIO_Init+0xfc>
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	685b      	ldr	r3, [r3, #4]
 80008c0:	2b12      	cmp	r3, #18
 80008c2:	d123      	bne.n	800090c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80008c4:	69fb      	ldr	r3, [r7, #28]
 80008c6:	08da      	lsrs	r2, r3, #3
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	3208      	adds	r2, #8
 80008cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80008d2:	69fb      	ldr	r3, [r7, #28]
 80008d4:	f003 0307 	and.w	r3, r3, #7
 80008d8:	009b      	lsls	r3, r3, #2
 80008da:	220f      	movs	r2, #15
 80008dc:	fa02 f303 	lsl.w	r3, r2, r3
 80008e0:	43db      	mvns	r3, r3
 80008e2:	69ba      	ldr	r2, [r7, #24]
 80008e4:	4013      	ands	r3, r2
 80008e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	691a      	ldr	r2, [r3, #16]
 80008ec:	69fb      	ldr	r3, [r7, #28]
 80008ee:	f003 0307 	and.w	r3, r3, #7
 80008f2:	009b      	lsls	r3, r3, #2
 80008f4:	fa02 f303 	lsl.w	r3, r2, r3
 80008f8:	69ba      	ldr	r2, [r7, #24]
 80008fa:	4313      	orrs	r3, r2
 80008fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80008fe:	69fb      	ldr	r3, [r7, #28]
 8000900:	08da      	lsrs	r2, r3, #3
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	3208      	adds	r2, #8
 8000906:	69b9      	ldr	r1, [r7, #24]
 8000908:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	005b      	lsls	r3, r3, #1
 8000916:	2203      	movs	r2, #3
 8000918:	fa02 f303 	lsl.w	r3, r2, r3
 800091c:	43db      	mvns	r3, r3
 800091e:	69ba      	ldr	r2, [r7, #24]
 8000920:	4013      	ands	r3, r2
 8000922:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	f003 0203 	and.w	r2, r3, #3
 800092c:	69fb      	ldr	r3, [r7, #28]
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	fa02 f303 	lsl.w	r3, r2, r3
 8000934:	69ba      	ldr	r2, [r7, #24]
 8000936:	4313      	orrs	r3, r2
 8000938:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	69ba      	ldr	r2, [r7, #24]
 800093e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000948:	2b00      	cmp	r3, #0
 800094a:	f000 80b4 	beq.w	8000ab6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	4a5f      	ldr	r2, [pc, #380]	; (8000ad0 <HAL_GPIO_Init+0x308>)
 8000954:	4b5e      	ldr	r3, [pc, #376]	; (8000ad0 <HAL_GPIO_Init+0x308>)
 8000956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000958:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800095c:	6453      	str	r3, [r2, #68]	; 0x44
 800095e:	4b5c      	ldr	r3, [pc, #368]	; (8000ad0 <HAL_GPIO_Init+0x308>)
 8000960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800096a:	4a5a      	ldr	r2, [pc, #360]	; (8000ad4 <HAL_GPIO_Init+0x30c>)
 800096c:	69fb      	ldr	r3, [r7, #28]
 800096e:	089b      	lsrs	r3, r3, #2
 8000970:	3302      	adds	r3, #2
 8000972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000976:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000978:	69fb      	ldr	r3, [r7, #28]
 800097a:	f003 0303 	and.w	r3, r3, #3
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	220f      	movs	r2, #15
 8000982:	fa02 f303 	lsl.w	r3, r2, r3
 8000986:	43db      	mvns	r3, r3
 8000988:	69ba      	ldr	r2, [r7, #24]
 800098a:	4013      	ands	r3, r2
 800098c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4a51      	ldr	r2, [pc, #324]	; (8000ad8 <HAL_GPIO_Init+0x310>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d02b      	beq.n	80009ee <HAL_GPIO_Init+0x226>
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4a50      	ldr	r2, [pc, #320]	; (8000adc <HAL_GPIO_Init+0x314>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d025      	beq.n	80009ea <HAL_GPIO_Init+0x222>
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4a4f      	ldr	r2, [pc, #316]	; (8000ae0 <HAL_GPIO_Init+0x318>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d01f      	beq.n	80009e6 <HAL_GPIO_Init+0x21e>
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4a4e      	ldr	r2, [pc, #312]	; (8000ae4 <HAL_GPIO_Init+0x31c>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d019      	beq.n	80009e2 <HAL_GPIO_Init+0x21a>
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4a4d      	ldr	r2, [pc, #308]	; (8000ae8 <HAL_GPIO_Init+0x320>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d013      	beq.n	80009de <HAL_GPIO_Init+0x216>
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4a4c      	ldr	r2, [pc, #304]	; (8000aec <HAL_GPIO_Init+0x324>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d00d      	beq.n	80009da <HAL_GPIO_Init+0x212>
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4a4b      	ldr	r2, [pc, #300]	; (8000af0 <HAL_GPIO_Init+0x328>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d007      	beq.n	80009d6 <HAL_GPIO_Init+0x20e>
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4a4a      	ldr	r2, [pc, #296]	; (8000af4 <HAL_GPIO_Init+0x32c>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d101      	bne.n	80009d2 <HAL_GPIO_Init+0x20a>
 80009ce:	2307      	movs	r3, #7
 80009d0:	e00e      	b.n	80009f0 <HAL_GPIO_Init+0x228>
 80009d2:	2308      	movs	r3, #8
 80009d4:	e00c      	b.n	80009f0 <HAL_GPIO_Init+0x228>
 80009d6:	2306      	movs	r3, #6
 80009d8:	e00a      	b.n	80009f0 <HAL_GPIO_Init+0x228>
 80009da:	2305      	movs	r3, #5
 80009dc:	e008      	b.n	80009f0 <HAL_GPIO_Init+0x228>
 80009de:	2304      	movs	r3, #4
 80009e0:	e006      	b.n	80009f0 <HAL_GPIO_Init+0x228>
 80009e2:	2303      	movs	r3, #3
 80009e4:	e004      	b.n	80009f0 <HAL_GPIO_Init+0x228>
 80009e6:	2302      	movs	r3, #2
 80009e8:	e002      	b.n	80009f0 <HAL_GPIO_Init+0x228>
 80009ea:	2301      	movs	r3, #1
 80009ec:	e000      	b.n	80009f0 <HAL_GPIO_Init+0x228>
 80009ee:	2300      	movs	r3, #0
 80009f0:	69fa      	ldr	r2, [r7, #28]
 80009f2:	f002 0203 	and.w	r2, r2, #3
 80009f6:	0092      	lsls	r2, r2, #2
 80009f8:	4093      	lsls	r3, r2
 80009fa:	69ba      	ldr	r2, [r7, #24]
 80009fc:	4313      	orrs	r3, r2
 80009fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a00:	4934      	ldr	r1, [pc, #208]	; (8000ad4 <HAL_GPIO_Init+0x30c>)
 8000a02:	69fb      	ldr	r3, [r7, #28]
 8000a04:	089b      	lsrs	r3, r3, #2
 8000a06:	3302      	adds	r3, #2
 8000a08:	69ba      	ldr	r2, [r7, #24]
 8000a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a0e:	4b3a      	ldr	r3, [pc, #232]	; (8000af8 <HAL_GPIO_Init+0x330>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a14:	693b      	ldr	r3, [r7, #16]
 8000a16:	43db      	mvns	r3, r3
 8000a18:	69ba      	ldr	r2, [r7, #24]
 8000a1a:	4013      	ands	r3, r2
 8000a1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d003      	beq.n	8000a32 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000a2a:	69ba      	ldr	r2, [r7, #24]
 8000a2c:	693b      	ldr	r3, [r7, #16]
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a32:	4a31      	ldr	r2, [pc, #196]	; (8000af8 <HAL_GPIO_Init+0x330>)
 8000a34:	69bb      	ldr	r3, [r7, #24]
 8000a36:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a38:	4b2f      	ldr	r3, [pc, #188]	; (8000af8 <HAL_GPIO_Init+0x330>)
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a3e:	693b      	ldr	r3, [r7, #16]
 8000a40:	43db      	mvns	r3, r3
 8000a42:	69ba      	ldr	r2, [r7, #24]
 8000a44:	4013      	ands	r3, r2
 8000a46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d003      	beq.n	8000a5c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000a54:	69ba      	ldr	r2, [r7, #24]
 8000a56:	693b      	ldr	r3, [r7, #16]
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a5c:	4a26      	ldr	r2, [pc, #152]	; (8000af8 <HAL_GPIO_Init+0x330>)
 8000a5e:	69bb      	ldr	r3, [r7, #24]
 8000a60:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a62:	4b25      	ldr	r3, [pc, #148]	; (8000af8 <HAL_GPIO_Init+0x330>)
 8000a64:	689b      	ldr	r3, [r3, #8]
 8000a66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a68:	693b      	ldr	r3, [r7, #16]
 8000a6a:	43db      	mvns	r3, r3
 8000a6c:	69ba      	ldr	r2, [r7, #24]
 8000a6e:	4013      	ands	r3, r2
 8000a70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d003      	beq.n	8000a86 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000a7e:	69ba      	ldr	r2, [r7, #24]
 8000a80:	693b      	ldr	r3, [r7, #16]
 8000a82:	4313      	orrs	r3, r2
 8000a84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a86:	4a1c      	ldr	r2, [pc, #112]	; (8000af8 <HAL_GPIO_Init+0x330>)
 8000a88:	69bb      	ldr	r3, [r7, #24]
 8000a8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a8c:	4b1a      	ldr	r3, [pc, #104]	; (8000af8 <HAL_GPIO_Init+0x330>)
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a92:	693b      	ldr	r3, [r7, #16]
 8000a94:	43db      	mvns	r3, r3
 8000a96:	69ba      	ldr	r2, [r7, #24]
 8000a98:	4013      	ands	r3, r2
 8000a9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d003      	beq.n	8000ab0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000aa8:	69ba      	ldr	r2, [r7, #24]
 8000aaa:	693b      	ldr	r3, [r7, #16]
 8000aac:	4313      	orrs	r3, r2
 8000aae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ab0:	4a11      	ldr	r2, [pc, #68]	; (8000af8 <HAL_GPIO_Init+0x330>)
 8000ab2:	69bb      	ldr	r3, [r7, #24]
 8000ab4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	61fb      	str	r3, [r7, #28]
 8000abc:	69fb      	ldr	r3, [r7, #28]
 8000abe:	2b0f      	cmp	r3, #15
 8000ac0:	f67f ae90 	bls.w	80007e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ac4:	bf00      	nop
 8000ac6:	3724      	adds	r7, #36	; 0x24
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40013800 	.word	0x40013800
 8000ad8:	40020000 	.word	0x40020000
 8000adc:	40020400 	.word	0x40020400
 8000ae0:	40020800 	.word	0x40020800
 8000ae4:	40020c00 	.word	0x40020c00
 8000ae8:	40021000 	.word	0x40021000
 8000aec:	40021400 	.word	0x40021400
 8000af0:	40021800 	.word	0x40021800
 8000af4:	40021c00 	.word	0x40021c00
 8000af8:	40013c00 	.word	0x40013c00

08000afc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	460b      	mov	r3, r1
 8000b06:	807b      	strh	r3, [r7, #2]
 8000b08:	4613      	mov	r3, r2
 8000b0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b0c:	787b      	ldrb	r3, [r7, #1]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d003      	beq.n	8000b1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b12:	887a      	ldrh	r2, [r7, #2]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b18:	e003      	b.n	8000b22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b1a:	887b      	ldrh	r3, [r7, #2]
 8000b1c:	041a      	lsls	r2, r3, #16
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	619a      	str	r2, [r3, #24]
}
 8000b22:	bf00      	nop
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
	...

08000b30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000b30:	b590      	push	{r4, r7, lr}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d101      	bne.n	8000b42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e11f      	b.n	8000d82 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d106      	bne.n	8000b5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2200      	movs	r2, #0
 8000b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f001 fef4 	bl	8002944 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2224      	movs	r2, #36	; 0x24
 8000b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	687a      	ldr	r2, [r7, #4]
 8000b6a:	6812      	ldr	r2, [r2, #0]
 8000b6c:	6812      	ldr	r2, [r2, #0]
 8000b6e:	f022 0201 	bic.w	r2, r2, #1
 8000b72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	687a      	ldr	r2, [r7, #4]
 8000b7a:	6812      	ldr	r2, [r2, #0]
 8000b7c:	6812      	ldr	r2, [r2, #0]
 8000b7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000b82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	687a      	ldr	r2, [r7, #4]
 8000b8a:	6812      	ldr	r2, [r2, #0]
 8000b8c:	6812      	ldr	r2, [r2, #0]
 8000b8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000b92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000b94:	f001 fcb0 	bl	80024f8 <HAL_RCC_GetPCLK1Freq>
 8000b98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	4a7b      	ldr	r2, [pc, #492]	; (8000d8c <HAL_I2C_Init+0x25c>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d807      	bhi.n	8000bb4 <HAL_I2C_Init+0x84>
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	4a7a      	ldr	r2, [pc, #488]	; (8000d90 <HAL_I2C_Init+0x260>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	bf94      	ite	ls
 8000bac:	2301      	movls	r3, #1
 8000bae:	2300      	movhi	r3, #0
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	e006      	b.n	8000bc2 <HAL_I2C_Init+0x92>
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	4a77      	ldr	r2, [pc, #476]	; (8000d94 <HAL_I2C_Init+0x264>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	bf94      	ite	ls
 8000bbc:	2301      	movls	r3, #1
 8000bbe:	2300      	movhi	r3, #0
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e0db      	b.n	8000d82 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	4a72      	ldr	r2, [pc, #456]	; (8000d98 <HAL_I2C_Init+0x268>)
 8000bce:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd2:	0c9b      	lsrs	r3, r3, #18
 8000bd4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	6812      	ldr	r2, [r2, #0]
 8000bde:	6852      	ldr	r2, [r2, #4]
 8000be0:	f022 013f 	bic.w	r1, r2, #63	; 0x3f
 8000be4:	68ba      	ldr	r2, [r7, #8]
 8000be6:	430a      	orrs	r2, r1
 8000be8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	6a1b      	ldr	r3, [r3, #32]
 8000bf4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	4863      	ldr	r0, [pc, #396]	; (8000d8c <HAL_I2C_Init+0x25c>)
 8000bfe:	4283      	cmp	r3, r0
 8000c00:	d802      	bhi.n	8000c08 <HAL_I2C_Init+0xd8>
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	3301      	adds	r3, #1
 8000c06:	e009      	b.n	8000c1c <HAL_I2C_Init+0xec>
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000c0e:	fb00 f303 	mul.w	r3, r0, r3
 8000c12:	4862      	ldr	r0, [pc, #392]	; (8000d9c <HAL_I2C_Init+0x26c>)
 8000c14:	fba0 0303 	umull	r0, r3, r0, r3
 8000c18:	099b      	lsrs	r3, r3, #6
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	430b      	orrs	r3, r1
 8000c1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6818      	ldr	r0, [r3, #0]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	69db      	ldr	r3, [r3, #28]
 8000c2a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000c2e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	4955      	ldr	r1, [pc, #340]	; (8000d8c <HAL_I2C_Init+0x25c>)
 8000c38:	428b      	cmp	r3, r1
 8000c3a:	d80d      	bhi.n	8000c58 <HAL_I2C_Init+0x128>
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	1e59      	subs	r1, r3, #1
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c50:	2b04      	cmp	r3, #4
 8000c52:	bf38      	it	cc
 8000c54:	2304      	movcc	r3, #4
 8000c56:	e04f      	b.n	8000cf8 <HAL_I2C_Init+0x1c8>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	689b      	ldr	r3, [r3, #8]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d111      	bne.n	8000c84 <HAL_I2C_Init+0x154>
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	1e5c      	subs	r4, r3, #1
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6859      	ldr	r1, [r3, #4]
 8000c68:	460b      	mov	r3, r1
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	440b      	add	r3, r1
 8000c6e:	fbb4 f3f3 	udiv	r3, r4, r3
 8000c72:	3301      	adds	r3, #1
 8000c74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	bf0c      	ite	eq
 8000c7c:	2301      	moveq	r3, #1
 8000c7e:	2300      	movne	r3, #0
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	e012      	b.n	8000caa <HAL_I2C_Init+0x17a>
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	1e5c      	subs	r4, r3, #1
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6859      	ldr	r1, [r3, #4]
 8000c8c:	460b      	mov	r3, r1
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	440b      	add	r3, r1
 8000c92:	0099      	lsls	r1, r3, #2
 8000c94:	440b      	add	r3, r1
 8000c96:	fbb4 f3f3 	udiv	r3, r4, r3
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	bf0c      	ite	eq
 8000ca4:	2301      	moveq	r3, #1
 8000ca6:	2300      	movne	r3, #0
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <HAL_I2C_Init+0x182>
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e022      	b.n	8000cf8 <HAL_I2C_Init+0x1c8>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	689b      	ldr	r3, [r3, #8]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d10e      	bne.n	8000cd8 <HAL_I2C_Init+0x1a8>
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	1e5c      	subs	r4, r3, #1
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6859      	ldr	r1, [r3, #4]
 8000cc2:	460b      	mov	r3, r1
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	440b      	add	r3, r1
 8000cc8:	fbb4 f3f3 	udiv	r3, r4, r3
 8000ccc:	3301      	adds	r3, #1
 8000cce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cd6:	e00f      	b.n	8000cf8 <HAL_I2C_Init+0x1c8>
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	1e5c      	subs	r4, r3, #1
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6859      	ldr	r1, [r3, #4]
 8000ce0:	460b      	mov	r3, r1
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	440b      	add	r3, r1
 8000ce6:	0099      	lsls	r1, r3, #2
 8000ce8:	440b      	add	r3, r1
 8000cea:	fbb4 f3f3 	udiv	r3, r4, r3
 8000cee:	3301      	adds	r3, #1
 8000cf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cf4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	61c3      	str	r3, [r0, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	687a      	ldr	r2, [r7, #4]
 8000d02:	6812      	ldr	r2, [r2, #0]
 8000d04:	6812      	ldr	r2, [r2, #0]
 8000d06:	f022 01c0 	bic.w	r1, r2, #192	; 0xc0
 8000d0a:	687a      	ldr	r2, [r7, #4]
 8000d0c:	69d0      	ldr	r0, [r2, #28]
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	6a12      	ldr	r2, [r2, #32]
 8000d12:	4302      	orrs	r2, r0
 8000d14:	430a      	orrs	r2, r1
 8000d16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	689b      	ldr	r3, [r3, #8]
 8000d22:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000d26:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000d2a:	6879      	ldr	r1, [r7, #4]
 8000d2c:	6908      	ldr	r0, [r1, #16]
 8000d2e:	6879      	ldr	r1, [r7, #4]
 8000d30:	68c9      	ldr	r1, [r1, #12]
 8000d32:	4301      	orrs	r1, r0
 8000d34:	430b      	orrs	r3, r1
 8000d36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	687a      	ldr	r2, [r7, #4]
 8000d3e:	6812      	ldr	r2, [r2, #0]
 8000d40:	68d2      	ldr	r2, [r2, #12]
 8000d42:	f022 01ff 	bic.w	r1, r2, #255	; 0xff
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	6950      	ldr	r0, [r2, #20]
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	6992      	ldr	r2, [r2, #24]
 8000d4e:	4302      	orrs	r2, r0
 8000d50:	430a      	orrs	r2, r1
 8000d52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	687a      	ldr	r2, [r7, #4]
 8000d5a:	6812      	ldr	r2, [r2, #0]
 8000d5c:	6812      	ldr	r2, [r2, #0]
 8000d5e:	f042 0201 	orr.w	r2, r2, #1
 8000d62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2200      	movs	r2, #0
 8000d68:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2220      	movs	r2, #32
 8000d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2200      	movs	r2, #0
 8000d76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3714      	adds	r7, #20
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd90      	pop	{r4, r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	000186a0 	.word	0x000186a0
 8000d90:	001e847f 	.word	0x001e847f
 8000d94:	003d08ff 	.word	0x003d08ff
 8000d98:	431bde83 	.word	0x431bde83
 8000d9c:	10624dd3 	.word	0x10624dd3

08000da0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b088      	sub	sp, #32
 8000da4:	af02      	add	r7, sp, #8
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	607a      	str	r2, [r7, #4]
 8000daa:	461a      	mov	r2, r3
 8000dac:	460b      	mov	r3, r1
 8000dae:	817b      	strh	r3, [r7, #10]
 8000db0:	4613      	mov	r3, r2
 8000db2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000db4:	f7ff fbf6 	bl	80005a4 <HAL_GetTick>
 8000db8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	2b20      	cmp	r3, #32
 8000dc4:	f040 80e0 	bne.w	8000f88 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	9300      	str	r3, [sp, #0]
 8000dcc:	2319      	movs	r3, #25
 8000dce:	2201      	movs	r2, #1
 8000dd0:	4970      	ldr	r1, [pc, #448]	; (8000f94 <HAL_I2C_Master_Transmit+0x1f4>)
 8000dd2:	68f8      	ldr	r0, [r7, #12]
 8000dd4:	f000 fd9a 	bl	800190c <I2C_WaitOnFlagUntilTimeout>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8000dde:	2302      	movs	r3, #2
 8000de0:	e0d3      	b.n	8000f8a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d101      	bne.n	8000df0 <HAL_I2C_Master_Transmit+0x50>
 8000dec:	2302      	movs	r3, #2
 8000dee:	e0cc      	b.n	8000f8a <HAL_I2C_Master_Transmit+0x1ea>
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	2201      	movs	r2, #1
 8000df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d007      	beq.n	8000e16 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	68fa      	ldr	r2, [r7, #12]
 8000e0c:	6812      	ldr	r2, [r2, #0]
 8000e0e:	6812      	ldr	r2, [r2, #0]
 8000e10:	f042 0201 	orr.w	r2, r2, #1
 8000e14:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	68fa      	ldr	r2, [r7, #12]
 8000e1c:	6812      	ldr	r2, [r2, #0]
 8000e1e:	6812      	ldr	r2, [r2, #0]
 8000e20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000e24:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	2221      	movs	r2, #33	; 0x21
 8000e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	2210      	movs	r2, #16
 8000e32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	2200      	movs	r2, #0
 8000e3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	687a      	ldr	r2, [r7, #4]
 8000e40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	893a      	ldrh	r2, [r7, #8]
 8000e46:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e4c:	b29a      	uxth	r2, r3
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	4a50      	ldr	r2, [pc, #320]	; (8000f98 <HAL_I2C_Master_Transmit+0x1f8>)
 8000e56:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8000e58:	8979      	ldrh	r1, [r7, #10]
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	6a3a      	ldr	r2, [r7, #32]
 8000e5e:	68f8      	ldr	r0, [r7, #12]
 8000e60:	f000 fbee 	bl	8001640 <I2C_MasterRequestWrite>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e08d      	b.n	8000f8a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000e6e:	2300      	movs	r3, #0
 8000e70:	613b      	str	r3, [r7, #16]
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	695b      	ldr	r3, [r3, #20]
 8000e78:	613b      	str	r3, [r7, #16]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	613b      	str	r3, [r7, #16]
 8000e82:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8000e84:	e066      	b.n	8000f54 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000e86:	697a      	ldr	r2, [r7, #20]
 8000e88:	6a39      	ldr	r1, [r7, #32]
 8000e8a:	68f8      	ldr	r0, [r7, #12]
 8000e8c:	f000 fe14 	bl	8001ab8 <I2C_WaitOnTXEFlagUntilTimeout>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d00d      	beq.n	8000eb2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9a:	2b04      	cmp	r3, #4
 8000e9c:	d107      	bne.n	8000eae <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	68fa      	ldr	r2, [r7, #12]
 8000ea4:	6812      	ldr	r2, [r2, #0]
 8000ea6:	6812      	ldr	r2, [r2, #0]
 8000ea8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000eac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e06b      	b.n	8000f8a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	68fa      	ldr	r2, [r7, #12]
 8000eb8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000eba:	7812      	ldrb	r2, [r2, #0]
 8000ebc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec2:	1c5a      	adds	r2, r3, #1
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ecc:	b29b      	uxth	r3, r3
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	b29a      	uxth	r2, r3
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000eda:	3b01      	subs	r3, #1
 8000edc:	b29a      	uxth	r2, r3
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	695b      	ldr	r3, [r3, #20]
 8000ee8:	f003 0304 	and.w	r3, r3, #4
 8000eec:	2b04      	cmp	r3, #4
 8000eee:	d11b      	bne.n	8000f28 <HAL_I2C_Master_Transmit+0x188>
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d017      	beq.n	8000f28 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	68fa      	ldr	r2, [r7, #12]
 8000efe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000f00:	7812      	ldrb	r2, [r2, #0]
 8000f02:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f08:	1c5a      	adds	r2, r3, #1
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f12:	b29b      	uxth	r3, r3
 8000f14:	3b01      	subs	r3, #1
 8000f16:	b29a      	uxth	r2, r3
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f20:	3b01      	subs	r3, #1
 8000f22:	b29a      	uxth	r2, r3
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f28:	697a      	ldr	r2, [r7, #20]
 8000f2a:	6a39      	ldr	r1, [r7, #32]
 8000f2c:	68f8      	ldr	r0, [r7, #12]
 8000f2e:	f000 fe04 	bl	8001b3a <I2C_WaitOnBTFFlagUntilTimeout>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d00d      	beq.n	8000f54 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3c:	2b04      	cmp	r3, #4
 8000f3e:	d107      	bne.n	8000f50 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	68fa      	ldr	r2, [r7, #12]
 8000f46:	6812      	ldr	r2, [r2, #0]
 8000f48:	6812      	ldr	r2, [r2, #0]
 8000f4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f4e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	e01a      	b.n	8000f8a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d194      	bne.n	8000e86 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	68fa      	ldr	r2, [r7, #12]
 8000f62:	6812      	ldr	r2, [r2, #0]
 8000f64:	6812      	ldr	r2, [r2, #0]
 8000f66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	2220      	movs	r2, #32
 8000f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	2200      	movs	r2, #0
 8000f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8000f84:	2300      	movs	r3, #0
 8000f86:	e000      	b.n	8000f8a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8000f88:	2302      	movs	r3, #2
  }
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3718      	adds	r7, #24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	00100002 	.word	0x00100002
 8000f98:	ffff0000 	.word	0xffff0000

08000f9c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08c      	sub	sp, #48	; 0x30
 8000fa0:	af02      	add	r7, sp, #8
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	4608      	mov	r0, r1
 8000fa6:	4611      	mov	r1, r2
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4603      	mov	r3, r0
 8000fac:	817b      	strh	r3, [r7, #10]
 8000fae:	460b      	mov	r3, r1
 8000fb0:	813b      	strh	r3, [r7, #8]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000fb6:	f7ff faf5 	bl	80005a4 <HAL_GetTick>
 8000fba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	2b20      	cmp	r3, #32
 8000fc6:	f040 8208 	bne.w	80013da <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	2319      	movs	r3, #25
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	497b      	ldr	r1, [pc, #492]	; (80011c0 <HAL_I2C_Mem_Read+0x224>)
 8000fd4:	68f8      	ldr	r0, [r7, #12]
 8000fd6:	f000 fc99 	bl	800190c <I2C_WaitOnFlagUntilTimeout>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	e1fb      	b.n	80013dc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d101      	bne.n	8000ff2 <HAL_I2C_Mem_Read+0x56>
 8000fee:	2302      	movs	r3, #2
 8000ff0:	e1f4      	b.n	80013dc <HAL_I2C_Mem_Read+0x440>
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f003 0301 	and.w	r3, r3, #1
 8001004:	2b01      	cmp	r3, #1
 8001006:	d007      	beq.n	8001018 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	68fa      	ldr	r2, [r7, #12]
 800100e:	6812      	ldr	r2, [r2, #0]
 8001010:	6812      	ldr	r2, [r2, #0]
 8001012:	f042 0201 	orr.w	r2, r2, #1
 8001016:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	68fa      	ldr	r2, [r7, #12]
 800101e:	6812      	ldr	r2, [r2, #0]
 8001020:	6812      	ldr	r2, [r2, #0]
 8001022:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001026:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	2222      	movs	r2, #34	; 0x22
 800102c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	2240      	movs	r2, #64	; 0x40
 8001034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	2200      	movs	r2, #0
 800103c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001042:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001048:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800104e:	b29a      	uxth	r2, r3
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	4a5b      	ldr	r2, [pc, #364]	; (80011c4 <HAL_I2C_Mem_Read+0x228>)
 8001058:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800105a:	88f8      	ldrh	r0, [r7, #6]
 800105c:	893a      	ldrh	r2, [r7, #8]
 800105e:	8979      	ldrh	r1, [r7, #10]
 8001060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001062:	9301      	str	r3, [sp, #4]
 8001064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	4603      	mov	r3, r0
 800106a:	68f8      	ldr	r0, [r7, #12]
 800106c:	f000 fb68 	bl	8001740 <I2C_RequestMemoryRead>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e1b0      	b.n	80013dc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800107e:	2b00      	cmp	r3, #0
 8001080:	d113      	bne.n	80010aa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001082:	2300      	movs	r3, #0
 8001084:	623b      	str	r3, [r7, #32]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	695b      	ldr	r3, [r3, #20]
 800108c:	623b      	str	r3, [r7, #32]
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	623b      	str	r3, [r7, #32]
 8001096:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	68fa      	ldr	r2, [r7, #12]
 800109e:	6812      	ldr	r2, [r2, #0]
 80010a0:	6812      	ldr	r2, [r2, #0]
 80010a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	e184      	b.n	80013b4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d11b      	bne.n	80010ea <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	68fa      	ldr	r2, [r7, #12]
 80010b8:	6812      	ldr	r2, [r2, #0]
 80010ba:	6812      	ldr	r2, [r2, #0]
 80010bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80010c2:	2300      	movs	r3, #0
 80010c4:	61fb      	str	r3, [r7, #28]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	695b      	ldr	r3, [r3, #20]
 80010cc:	61fb      	str	r3, [r7, #28]
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	61fb      	str	r3, [r7, #28]
 80010d6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	68fa      	ldr	r2, [r7, #12]
 80010de:	6812      	ldr	r2, [r2, #0]
 80010e0:	6812      	ldr	r2, [r2, #0]
 80010e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	e164      	b.n	80013b4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d11b      	bne.n	800112a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	68fa      	ldr	r2, [r7, #12]
 80010f8:	6812      	ldr	r2, [r2, #0]
 80010fa:	6812      	ldr	r2, [r2, #0]
 80010fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001100:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	68fa      	ldr	r2, [r7, #12]
 8001108:	6812      	ldr	r2, [r2, #0]
 800110a:	6812      	ldr	r2, [r2, #0]
 800110c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001110:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001112:	2300      	movs	r3, #0
 8001114:	61bb      	str	r3, [r7, #24]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	695b      	ldr	r3, [r3, #20]
 800111c:	61bb      	str	r3, [r7, #24]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	61bb      	str	r3, [r7, #24]
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	e144      	b.n	80013b4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	695b      	ldr	r3, [r3, #20]
 8001134:	617b      	str	r3, [r7, #20]
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	617b      	str	r3, [r7, #20]
 800113e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001140:	e138      	b.n	80013b4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001146:	2b03      	cmp	r3, #3
 8001148:	f200 80f1 	bhi.w	800132e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001150:	2b01      	cmp	r3, #1
 8001152:	d123      	bne.n	800119c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001156:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001158:	68f8      	ldr	r0, [r7, #12]
 800115a:	f000 fd2f 	bl	8001bbc <I2C_WaitOnRXNEFlagUntilTimeout>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	e139      	b.n	80013dc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800116c:	68fa      	ldr	r2, [r7, #12]
 800116e:	6812      	ldr	r2, [r2, #0]
 8001170:	6912      	ldr	r2, [r2, #16]
 8001172:	b2d2      	uxtb	r2, r2
 8001174:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800117a:	1c5a      	adds	r2, r3, #1
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001184:	3b01      	subs	r3, #1
 8001186:	b29a      	uxth	r2, r3
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001190:	b29b      	uxth	r3, r3
 8001192:	3b01      	subs	r3, #1
 8001194:	b29a      	uxth	r2, r3
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	855a      	strh	r2, [r3, #42]	; 0x2a
 800119a:	e10b      	b.n	80013b4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d14e      	bne.n	8001242 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80011a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011aa:	2200      	movs	r2, #0
 80011ac:	4906      	ldr	r1, [pc, #24]	; (80011c8 <HAL_I2C_Mem_Read+0x22c>)
 80011ae:	68f8      	ldr	r0, [r7, #12]
 80011b0:	f000 fbac 	bl	800190c <I2C_WaitOnFlagUntilTimeout>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d008      	beq.n	80011cc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e10e      	b.n	80013dc <HAL_I2C_Mem_Read+0x440>
 80011be:	bf00      	nop
 80011c0:	00100002 	.word	0x00100002
 80011c4:	ffff0000 	.word	0xffff0000
 80011c8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	68fa      	ldr	r2, [r7, #12]
 80011d2:	6812      	ldr	r2, [r2, #0]
 80011d4:	6812      	ldr	r2, [r2, #0]
 80011d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80011da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e0:	68fa      	ldr	r2, [r7, #12]
 80011e2:	6812      	ldr	r2, [r2, #0]
 80011e4:	6912      	ldr	r2, [r2, #16]
 80011e6:	b2d2      	uxtb	r2, r2
 80011e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ee:	1c5a      	adds	r2, r3, #1
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011f8:	3b01      	subs	r3, #1
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001204:	b29b      	uxth	r3, r3
 8001206:	3b01      	subs	r3, #1
 8001208:	b29a      	uxth	r2, r3
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001212:	68fa      	ldr	r2, [r7, #12]
 8001214:	6812      	ldr	r2, [r2, #0]
 8001216:	6912      	ldr	r2, [r2, #16]
 8001218:	b2d2      	uxtb	r2, r2
 800121a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001220:	1c5a      	adds	r2, r3, #1
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800122a:	3b01      	subs	r3, #1
 800122c:	b29a      	uxth	r2, r3
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001236:	b29b      	uxth	r3, r3
 8001238:	3b01      	subs	r3, #1
 800123a:	b29a      	uxth	r2, r3
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001240:	e0b8      	b.n	80013b4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001248:	2200      	movs	r2, #0
 800124a:	4966      	ldr	r1, [pc, #408]	; (80013e4 <HAL_I2C_Mem_Read+0x448>)
 800124c:	68f8      	ldr	r0, [r7, #12]
 800124e:	f000 fb5d 	bl	800190c <I2C_WaitOnFlagUntilTimeout>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e0bf      	b.n	80013dc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	68fa      	ldr	r2, [r7, #12]
 8001262:	6812      	ldr	r2, [r2, #0]
 8001264:	6812      	ldr	r2, [r2, #0]
 8001266:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800126a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001270:	68fa      	ldr	r2, [r7, #12]
 8001272:	6812      	ldr	r2, [r2, #0]
 8001274:	6912      	ldr	r2, [r2, #16]
 8001276:	b2d2      	uxtb	r2, r2
 8001278:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127e:	1c5a      	adds	r2, r3, #1
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001288:	3b01      	subs	r3, #1
 800128a:	b29a      	uxth	r2, r3
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001294:	b29b      	uxth	r3, r3
 8001296:	3b01      	subs	r3, #1
 8001298:	b29a      	uxth	r2, r3
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800129e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012a4:	2200      	movs	r2, #0
 80012a6:	494f      	ldr	r1, [pc, #316]	; (80013e4 <HAL_I2C_Mem_Read+0x448>)
 80012a8:	68f8      	ldr	r0, [r7, #12]
 80012aa:	f000 fb2f 	bl	800190c <I2C_WaitOnFlagUntilTimeout>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	e091      	b.n	80013dc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	68fa      	ldr	r2, [r7, #12]
 80012be:	6812      	ldr	r2, [r2, #0]
 80012c0:	6812      	ldr	r2, [r2, #0]
 80012c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012cc:	68fa      	ldr	r2, [r7, #12]
 80012ce:	6812      	ldr	r2, [r2, #0]
 80012d0:	6912      	ldr	r2, [r2, #16]
 80012d2:	b2d2      	uxtb	r2, r2
 80012d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012da:	1c5a      	adds	r2, r3, #1
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012e4:	3b01      	subs	r3, #1
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	3b01      	subs	r3, #1
 80012f4:	b29a      	uxth	r2, r3
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fe:	68fa      	ldr	r2, [r7, #12]
 8001300:	6812      	ldr	r2, [r2, #0]
 8001302:	6912      	ldr	r2, [r2, #16]
 8001304:	b2d2      	uxtb	r2, r2
 8001306:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800130c:	1c5a      	adds	r2, r3, #1
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001316:	3b01      	subs	r3, #1
 8001318:	b29a      	uxth	r2, r3
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001322:	b29b      	uxth	r3, r3
 8001324:	3b01      	subs	r3, #1
 8001326:	b29a      	uxth	r2, r3
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800132c:	e042      	b.n	80013b4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800132e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001330:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001332:	68f8      	ldr	r0, [r7, #12]
 8001334:	f000 fc42 	bl	8001bbc <I2C_WaitOnRXNEFlagUntilTimeout>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e04c      	b.n	80013dc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001346:	68fa      	ldr	r2, [r7, #12]
 8001348:	6812      	ldr	r2, [r2, #0]
 800134a:	6912      	ldr	r2, [r2, #16]
 800134c:	b2d2      	uxtb	r2, r2
 800134e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001354:	1c5a      	adds	r2, r3, #1
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800135e:	3b01      	subs	r3, #1
 8001360:	b29a      	uxth	r2, r3
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800136a:	b29b      	uxth	r3, r3
 800136c:	3b01      	subs	r3, #1
 800136e:	b29a      	uxth	r2, r3
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	695b      	ldr	r3, [r3, #20]
 800137a:	f003 0304 	and.w	r3, r3, #4
 800137e:	2b04      	cmp	r3, #4
 8001380:	d118      	bne.n	80013b4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001386:	68fa      	ldr	r2, [r7, #12]
 8001388:	6812      	ldr	r2, [r2, #0]
 800138a:	6912      	ldr	r2, [r2, #16]
 800138c:	b2d2      	uxtb	r2, r2
 800138e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001394:	1c5a      	adds	r2, r3, #1
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800139e:	3b01      	subs	r3, #1
 80013a0:	b29a      	uxth	r2, r3
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013aa:	b29b      	uxth	r3, r3
 80013ac:	3b01      	subs	r3, #1
 80013ae:	b29a      	uxth	r2, r3
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f47f aec2 	bne.w	8001142 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	2220      	movs	r2, #32
 80013c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	2200      	movs	r2, #0
 80013ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	2200      	movs	r2, #0
 80013d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80013d6:	2300      	movs	r3, #0
 80013d8:	e000      	b.n	80013dc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80013da:	2302      	movs	r3, #2
  }
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3728      	adds	r7, #40	; 0x28
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	00010004 	.word	0x00010004

080013e8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08a      	sub	sp, #40	; 0x28
 80013ec:	af02      	add	r7, sp, #8
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	607a      	str	r2, [r7, #4]
 80013f2:	603b      	str	r3, [r7, #0]
 80013f4:	460b      	mov	r3, r1
 80013f6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80013f8:	f7ff f8d4 	bl	80005a4 <HAL_GetTick>
 80013fc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80013fe:	2301      	movs	r3, #1
 8001400:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001408:	b2db      	uxtb	r3, r3
 800140a:	2b20      	cmp	r3, #32
 800140c:	f040 810f 	bne.w	800162e <HAL_I2C_IsDeviceReady+0x246>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	9300      	str	r3, [sp, #0]
 8001414:	2319      	movs	r3, #25
 8001416:	2201      	movs	r2, #1
 8001418:	4987      	ldr	r1, [pc, #540]	; (8001638 <HAL_I2C_IsDeviceReady+0x250>)
 800141a:	68f8      	ldr	r0, [r7, #12]
 800141c:	f000 fa76 	bl	800190c <I2C_WaitOnFlagUntilTimeout>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001426:	2302      	movs	r3, #2
 8001428:	e102      	b.n	8001630 <HAL_I2C_IsDeviceReady+0x248>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001430:	2b01      	cmp	r3, #1
 8001432:	d101      	bne.n	8001438 <HAL_I2C_IsDeviceReady+0x50>
 8001434:	2302      	movs	r3, #2
 8001436:	e0fb      	b.n	8001630 <HAL_I2C_IsDeviceReady+0x248>
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	2201      	movs	r2, #1
 800143c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	2b01      	cmp	r3, #1
 800144c:	d007      	beq.n	800145e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	6812      	ldr	r2, [r2, #0]
 8001456:	6812      	ldr	r2, [r2, #0]
 8001458:	f042 0201 	orr.w	r2, r2, #1
 800145c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	68fa      	ldr	r2, [r7, #12]
 8001464:	6812      	ldr	r2, [r2, #0]
 8001466:	6812      	ldr	r2, [r2, #0]
 8001468:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800146c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	2224      	movs	r2, #36	; 0x24
 8001472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	2200      	movs	r2, #0
 800147a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	4a6f      	ldr	r2, [pc, #444]	; (800163c <HAL_I2C_IsDeviceReady+0x254>)
 8001480:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	6812      	ldr	r2, [r2, #0]
 800148a:	6812      	ldr	r2, [r2, #0]
 800148c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001490:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	9300      	str	r3, [sp, #0]
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	2200      	movs	r2, #0
 800149a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800149e:	68f8      	ldr	r0, [r7, #12]
 80014a0:	f000 fa34 	bl	800190c <I2C_WaitOnFlagUntilTimeout>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d00c      	beq.n	80014c4 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d003      	beq.n	80014c0 <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014be:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e0b5      	b.n	8001630 <HAL_I2C_IsDeviceReady+0x248>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	897a      	ldrh	r2, [r7, #10]
 80014ca:	b2d2      	uxtb	r2, r2
 80014cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80014d0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80014d2:	f7ff f867 	bl	80005a4 <HAL_GetTick>
 80014d6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	695b      	ldr	r3, [r3, #20]
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	bf0c      	ite	eq
 80014e6:	2301      	moveq	r3, #1
 80014e8:	2300      	movne	r3, #0
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	695b      	ldr	r3, [r3, #20]
 80014f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014fc:	bf0c      	ite	eq
 80014fe:	2301      	moveq	r3, #1
 8001500:	2300      	movne	r3, #0
 8001502:	b2db      	uxtb	r3, r3
 8001504:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001506:	e025      	b.n	8001554 <HAL_I2C_IsDeviceReady+0x16c>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001508:	f7ff f84c 	bl	80005a4 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	1ad2      	subs	r2, r2, r3
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	429a      	cmp	r2, r3
 8001516:	d802      	bhi.n	800151e <HAL_I2C_IsDeviceReady+0x136>
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d103      	bne.n	8001526 <HAL_I2C_IsDeviceReady+0x13e>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	22a0      	movs	r2, #160	; 0xa0
 8001522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	695b      	ldr	r3, [r3, #20]
 800152c:	f003 0302 	and.w	r3, r3, #2
 8001530:	2b02      	cmp	r3, #2
 8001532:	bf0c      	ite	eq
 8001534:	2301      	moveq	r3, #1
 8001536:	2300      	movne	r3, #0
 8001538:	b2db      	uxtb	r3, r3
 800153a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	695b      	ldr	r3, [r3, #20]
 8001542:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001546:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800154a:	bf0c      	ite	eq
 800154c:	2301      	moveq	r3, #1
 800154e:	2300      	movne	r3, #0
 8001550:	b2db      	uxtb	r3, r3
 8001552:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800155a:	b2db      	uxtb	r3, r3
 800155c:	2ba0      	cmp	r3, #160	; 0xa0
 800155e:	d005      	beq.n	800156c <HAL_I2C_IsDeviceReady+0x184>
 8001560:	7dfb      	ldrb	r3, [r7, #23]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d102      	bne.n	800156c <HAL_I2C_IsDeviceReady+0x184>
 8001566:	7dbb      	ldrb	r3, [r7, #22]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d0cd      	beq.n	8001508 <HAL_I2C_IsDeviceReady+0x120>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	2220      	movs	r2, #32
 8001570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	695b      	ldr	r3, [r3, #20]
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	2b02      	cmp	r3, #2
 8001580:	d129      	bne.n	80015d6 <HAL_I2C_IsDeviceReady+0x1ee>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	68fa      	ldr	r2, [r7, #12]
 8001588:	6812      	ldr	r2, [r2, #0]
 800158a:	6812      	ldr	r2, [r2, #0]
 800158c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001590:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001592:	2300      	movs	r3, #0
 8001594:	613b      	str	r3, [r7, #16]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	695b      	ldr	r3, [r3, #20]
 800159c:	613b      	str	r3, [r7, #16]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	613b      	str	r3, [r7, #16]
 80015a6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	9300      	str	r3, [sp, #0]
 80015ac:	2319      	movs	r3, #25
 80015ae:	2201      	movs	r2, #1
 80015b0:	4921      	ldr	r1, [pc, #132]	; (8001638 <HAL_I2C_IsDeviceReady+0x250>)
 80015b2:	68f8      	ldr	r0, [r7, #12]
 80015b4:	f000 f9aa 	bl	800190c <I2C_WaitOnFlagUntilTimeout>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <HAL_I2C_IsDeviceReady+0x1da>
        {
          return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e036      	b.n	8001630 <HAL_I2C_IsDeviceReady+0x248>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2220      	movs	r2, #32
 80015c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	2200      	movs	r2, #0
 80015ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80015d2:	2300      	movs	r3, #0
 80015d4:	e02c      	b.n	8001630 <HAL_I2C_IsDeviceReady+0x248>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	68fa      	ldr	r2, [r7, #12]
 80015dc:	6812      	ldr	r2, [r2, #0]
 80015de:	6812      	ldr	r2, [r2, #0]
 80015e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015e4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80015ee:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	2319      	movs	r3, #25
 80015f6:	2201      	movs	r2, #1
 80015f8:	490f      	ldr	r1, [pc, #60]	; (8001638 <HAL_I2C_IsDeviceReady+0x250>)
 80015fa:	68f8      	ldr	r0, [r7, #12]
 80015fc:	f000 f986 	bl	800190c <I2C_WaitOnFlagUntilTimeout>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <HAL_I2C_IsDeviceReady+0x222>
        {
          return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e012      	b.n	8001630 <HAL_I2C_IsDeviceReady+0x248>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	3301      	adds	r3, #1
 800160e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	429a      	cmp	r2, r3
 8001616:	f4ff af34 	bcc.w	8001482 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2220      	movs	r2, #32
 800161e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2200      	movs	r2, #0
 8001626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e000      	b.n	8001630 <HAL_I2C_IsDeviceReady+0x248>
  }
  else
  {
    return HAL_BUSY;
 800162e:	2302      	movs	r3, #2
  }
}
 8001630:	4618      	mov	r0, r3
 8001632:	3720      	adds	r7, #32
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	00100002 	.word	0x00100002
 800163c:	ffff0000 	.word	0xffff0000

08001640 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b088      	sub	sp, #32
 8001644:	af02      	add	r7, sp, #8
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	607a      	str	r2, [r7, #4]
 800164a:	603b      	str	r3, [r7, #0]
 800164c:	460b      	mov	r3, r1
 800164e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001654:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	2b08      	cmp	r3, #8
 800165a:	d006      	beq.n	800166a <I2C_MasterRequestWrite+0x2a>
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d003      	beq.n	800166a <I2C_MasterRequestWrite+0x2a>
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001668:	d108      	bne.n	800167c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	6812      	ldr	r2, [r2, #0]
 8001672:	6812      	ldr	r2, [r2, #0]
 8001674:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	e00b      	b.n	8001694 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001680:	2b12      	cmp	r3, #18
 8001682:	d107      	bne.n	8001694 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	68fa      	ldr	r2, [r7, #12]
 800168a:	6812      	ldr	r2, [r2, #0]
 800168c:	6812      	ldr	r2, [r2, #0]
 800168e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001692:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	9300      	str	r3, [sp, #0]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80016a0:	68f8      	ldr	r0, [r7, #12]
 80016a2:	f000 f933 	bl	800190c <I2C_WaitOnFlagUntilTimeout>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d00c      	beq.n	80016c6 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d003      	beq.n	80016c2 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e034      	b.n	8001730 <I2C_MasterRequestWrite+0xf0>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	691b      	ldr	r3, [r3, #16]
 80016ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80016ce:	d107      	bne.n	80016e0 <I2C_MasterRequestWrite+0xa0>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	897a      	ldrh	r2, [r7, #10]
 80016d6:	b2d2      	uxtb	r2, r2
 80016d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80016dc:	611a      	str	r2, [r3, #16]
 80016de:	e01b      	b.n	8001718 <I2C_MasterRequestWrite+0xd8>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	897a      	ldrh	r2, [r7, #10]
 80016e6:	11d2      	asrs	r2, r2, #7
 80016e8:	b2d2      	uxtb	r2, r2
 80016ea:	f002 0206 	and.w	r2, r2, #6
 80016ee:	b2d2      	uxtb	r2, r2
 80016f0:	f062 020f 	orn	r2, r2, #15
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	490e      	ldr	r1, [pc, #56]	; (8001738 <I2C_MasterRequestWrite+0xf8>)
 80016fe:	68f8      	ldr	r0, [r7, #12]
 8001700:	f000 f95b 	bl	80019ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <I2C_MasterRequestWrite+0xce>
    {
      return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e010      	b.n	8001730 <I2C_MasterRequestWrite+0xf0>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	897a      	ldrh	r2, [r7, #10]
 8001714:	b2d2      	uxtb	r2, r2
 8001716:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	4907      	ldr	r1, [pc, #28]	; (800173c <I2C_MasterRequestWrite+0xfc>)
 800171e:	68f8      	ldr	r0, [r7, #12]
 8001720:	f000 f94b 	bl	80019ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <I2C_MasterRequestWrite+0xee>
  {
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e000      	b.n	8001730 <I2C_MasterRequestWrite+0xf0>
  }

  return HAL_OK;
 800172e:	2300      	movs	r3, #0
}
 8001730:	4618      	mov	r0, r3
 8001732:	3718      	adds	r7, #24
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	00010008 	.word	0x00010008
 800173c:	00010002 	.word	0x00010002

08001740 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b088      	sub	sp, #32
 8001744:	af02      	add	r7, sp, #8
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	4608      	mov	r0, r1
 800174a:	4611      	mov	r1, r2
 800174c:	461a      	mov	r2, r3
 800174e:	4603      	mov	r3, r0
 8001750:	817b      	strh	r3, [r7, #10]
 8001752:	460b      	mov	r3, r1
 8001754:	813b      	strh	r3, [r7, #8]
 8001756:	4613      	mov	r3, r2
 8001758:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	6812      	ldr	r2, [r2, #0]
 8001762:	6812      	ldr	r2, [r2, #0]
 8001764:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001768:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	6812      	ldr	r2, [r2, #0]
 8001772:	6812      	ldr	r2, [r2, #0]
 8001774:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001778:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800177a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177c:	9300      	str	r3, [sp, #0]
 800177e:	6a3b      	ldr	r3, [r7, #32]
 8001780:	2200      	movs	r2, #0
 8001782:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001786:	68f8      	ldr	r0, [r7, #12]
 8001788:	f000 f8c0 	bl	800190c <I2C_WaitOnFlagUntilTimeout>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d00c      	beq.n	80017ac <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800179c:	2b00      	cmp	r3, #0
 800179e:	d003      	beq.n	80017a8 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e0a8      	b.n	80018fe <I2C_RequestMemoryRead+0x1be>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	897a      	ldrh	r2, [r7, #10]
 80017b2:	b2d2      	uxtb	r2, r2
 80017b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80017b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80017ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017bc:	6a3a      	ldr	r2, [r7, #32]
 80017be:	4952      	ldr	r1, [pc, #328]	; (8001908 <I2C_RequestMemoryRead+0x1c8>)
 80017c0:	68f8      	ldr	r0, [r7, #12]
 80017c2:	f000 f8fa 	bl	80019ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <I2C_RequestMemoryRead+0x90>
  {
    return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e096      	b.n	80018fe <I2C_RequestMemoryRead+0x1be>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017d0:	2300      	movs	r3, #0
 80017d2:	617b      	str	r3, [r7, #20]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	695b      	ldr	r3, [r3, #20]
 80017da:	617b      	str	r3, [r7, #20]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	617b      	str	r3, [r7, #20]
 80017e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80017e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017e8:	6a39      	ldr	r1, [r7, #32]
 80017ea:	68f8      	ldr	r0, [r7, #12]
 80017ec:	f000 f964 	bl	8001ab8 <I2C_WaitOnTXEFlagUntilTimeout>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d00d      	beq.n	8001812 <I2C_RequestMemoryRead+0xd2>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	2b04      	cmp	r3, #4
 80017fc:	d107      	bne.n	800180e <I2C_RequestMemoryRead+0xce>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	68fa      	ldr	r2, [r7, #12]
 8001804:	6812      	ldr	r2, [r2, #0]
 8001806:	6812      	ldr	r2, [r2, #0]
 8001808:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800180c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e075      	b.n	80018fe <I2C_RequestMemoryRead+0x1be>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001812:	88fb      	ldrh	r3, [r7, #6]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d105      	bne.n	8001824 <I2C_RequestMemoryRead+0xe4>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	893a      	ldrh	r2, [r7, #8]
 800181e:	b2d2      	uxtb	r2, r2
 8001820:	611a      	str	r2, [r3, #16]
 8001822:	e021      	b.n	8001868 <I2C_RequestMemoryRead+0x128>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	893a      	ldrh	r2, [r7, #8]
 800182a:	0a12      	lsrs	r2, r2, #8
 800182c:	b292      	uxth	r2, r2
 800182e:	b2d2      	uxtb	r2, r2
 8001830:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001834:	6a39      	ldr	r1, [r7, #32]
 8001836:	68f8      	ldr	r0, [r7, #12]
 8001838:	f000 f93e 	bl	8001ab8 <I2C_WaitOnTXEFlagUntilTimeout>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d00d      	beq.n	800185e <I2C_RequestMemoryRead+0x11e>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	2b04      	cmp	r3, #4
 8001848:	d107      	bne.n	800185a <I2C_RequestMemoryRead+0x11a>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	6812      	ldr	r2, [r2, #0]
 8001852:	6812      	ldr	r2, [r2, #0]
 8001854:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001858:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e04f      	b.n	80018fe <I2C_RequestMemoryRead+0x1be>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	893a      	ldrh	r2, [r7, #8]
 8001864:	b2d2      	uxtb	r2, r2
 8001866:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800186a:	6a39      	ldr	r1, [r7, #32]
 800186c:	68f8      	ldr	r0, [r7, #12]
 800186e:	f000 f923 	bl	8001ab8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d00d      	beq.n	8001894 <I2C_RequestMemoryRead+0x154>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187c:	2b04      	cmp	r3, #4
 800187e:	d107      	bne.n	8001890 <I2C_RequestMemoryRead+0x150>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	68fa      	ldr	r2, [r7, #12]
 8001886:	6812      	ldr	r2, [r2, #0]
 8001888:	6812      	ldr	r2, [r2, #0]
 800188a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800188e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e034      	b.n	80018fe <I2C_RequestMemoryRead+0x1be>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	68fa      	ldr	r2, [r7, #12]
 800189a:	6812      	ldr	r2, [r2, #0]
 800189c:	6812      	ldr	r2, [r2, #0]
 800189e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018a2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80018a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a6:	9300      	str	r3, [sp, #0]
 80018a8:	6a3b      	ldr	r3, [r7, #32]
 80018aa:	2200      	movs	r2, #0
 80018ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80018b0:	68f8      	ldr	r0, [r7, #12]
 80018b2:	f000 f82b 	bl	800190c <I2C_WaitOnFlagUntilTimeout>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d00c      	beq.n	80018d6 <I2C_RequestMemoryRead+0x196>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d003      	beq.n	80018d2 <I2C_RequestMemoryRead+0x192>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e013      	b.n	80018fe <I2C_RequestMemoryRead+0x1be>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	897a      	ldrh	r2, [r7, #10]
 80018dc:	b2d2      	uxtb	r2, r2
 80018de:	f042 0201 	orr.w	r2, r2, #1
 80018e2:	b2d2      	uxtb	r2, r2
 80018e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80018e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e8:	6a3a      	ldr	r2, [r7, #32]
 80018ea:	4907      	ldr	r1, [pc, #28]	; (8001908 <I2C_RequestMemoryRead+0x1c8>)
 80018ec:	68f8      	ldr	r0, [r7, #12]
 80018ee:	f000 f864 	bl	80019ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <I2C_RequestMemoryRead+0x1bc>
  {
    return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e000      	b.n	80018fe <I2C_RequestMemoryRead+0x1be>
  }

  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3718      	adds	r7, #24
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	00010002 	.word	0x00010002

0800190c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	603b      	str	r3, [r7, #0]
 8001918:	4613      	mov	r3, r2
 800191a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800191c:	e025      	b.n	800196a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001924:	d021      	beq.n	800196a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001926:	f7fe fe3d 	bl	80005a4 <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	1ad2      	subs	r2, r2, r3
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	429a      	cmp	r2, r3
 8001934:	d802      	bhi.n	800193c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d116      	bne.n	800196a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2200      	movs	r2, #0
 8001940:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2220      	movs	r2, #32
 8001946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2200      	movs	r2, #0
 800194e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	f043 0220 	orr.w	r2, r3, #32
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2200      	movs	r2, #0
 8001962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e023      	b.n	80019b2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	0c1b      	lsrs	r3, r3, #16
 800196e:	b2db      	uxtb	r3, r3
 8001970:	2b01      	cmp	r3, #1
 8001972:	d10d      	bne.n	8001990 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	43da      	mvns	r2, r3
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	4013      	ands	r3, r2
 8001980:	b29b      	uxth	r3, r3
 8001982:	2b00      	cmp	r3, #0
 8001984:	bf0c      	ite	eq
 8001986:	2301      	moveq	r3, #1
 8001988:	2300      	movne	r3, #0
 800198a:	b2db      	uxtb	r3, r3
 800198c:	461a      	mov	r2, r3
 800198e:	e00c      	b.n	80019aa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	699b      	ldr	r3, [r3, #24]
 8001996:	43da      	mvns	r2, r3
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	4013      	ands	r3, r2
 800199c:	b29b      	uxth	r3, r3
 800199e:	2b00      	cmp	r3, #0
 80019a0:	bf0c      	ite	eq
 80019a2:	2301      	moveq	r3, #1
 80019a4:	2300      	movne	r3, #0
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	461a      	mov	r2, r3
 80019aa:	79fb      	ldrb	r3, [r7, #7]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d0b6      	beq.n	800191e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b084      	sub	sp, #16
 80019be:	af00      	add	r7, sp, #0
 80019c0:	60f8      	str	r0, [r7, #12]
 80019c2:	60b9      	str	r1, [r7, #8]
 80019c4:	607a      	str	r2, [r7, #4]
 80019c6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80019c8:	e051      	b.n	8001a6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	695b      	ldr	r3, [r3, #20]
 80019d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019d8:	d123      	bne.n	8001a22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	6812      	ldr	r2, [r2, #0]
 80019e2:	6812      	ldr	r2, [r2, #0]
 80019e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019e8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80019f2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2200      	movs	r2, #0
 80019f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2220      	movs	r2, #32
 80019fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	f043 0204 	orr.w	r2, r3, #4
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e046      	b.n	8001ab0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a28:	d021      	beq.n	8001a6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a2a:	f7fe fdbb 	bl	80005a4 <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	1ad2      	subs	r2, r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d802      	bhi.n	8001a40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d116      	bne.n	8001a6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2200      	movs	r2, #0
 8001a44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2220      	movs	r2, #32
 8001a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	f043 0220 	orr.w	r2, r3, #32
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e020      	b.n	8001ab0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	0c1b      	lsrs	r3, r3, #16
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d10c      	bne.n	8001a92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	695b      	ldr	r3, [r3, #20]
 8001a7e:	43da      	mvns	r2, r3
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	4013      	ands	r3, r2
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	bf14      	ite	ne
 8001a8a:	2301      	movne	r3, #1
 8001a8c:	2300      	moveq	r3, #0
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	e00b      	b.n	8001aaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	43da      	mvns	r2, r3
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	bf14      	ite	ne
 8001aa4:	2301      	movne	r3, #1
 8001aa6:	2300      	moveq	r3, #0
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d18d      	bne.n	80019ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3710      	adds	r7, #16
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ac4:	e02d      	b.n	8001b22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001ac6:	68f8      	ldr	r0, [r7, #12]
 8001ac8:	f000 f8ce 	bl	8001c68 <I2C_IsAcknowledgeFailed>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e02d      	b.n	8001b32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001adc:	d021      	beq.n	8001b22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ade:	f7fe fd61 	bl	80005a4 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	1ad2      	subs	r2, r2, r3
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d802      	bhi.n	8001af4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d116      	bne.n	8001b22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2200      	movs	r2, #0
 8001af8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2220      	movs	r2, #32
 8001afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	f043 0220 	orr.w	r2, r3, #32
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e007      	b.n	8001b32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	695b      	ldr	r3, [r3, #20]
 8001b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b2c:	2b80      	cmp	r3, #128	; 0x80
 8001b2e:	d1ca      	bne.n	8001ac6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b084      	sub	sp, #16
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	60f8      	str	r0, [r7, #12]
 8001b42:	60b9      	str	r1, [r7, #8]
 8001b44:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001b46:	e02d      	b.n	8001ba4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001b48:	68f8      	ldr	r0, [r7, #12]
 8001b4a:	f000 f88d 	bl	8001c68 <I2C_IsAcknowledgeFailed>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e02d      	b.n	8001bb4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b5e:	d021      	beq.n	8001ba4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b60:	f7fe fd20 	bl	80005a4 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	1ad2      	subs	r2, r2, r3
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d802      	bhi.n	8001b76 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d116      	bne.n	8001ba4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2220      	movs	r2, #32
 8001b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b90:	f043 0220 	orr.w	r2, r3, #32
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e007      	b.n	8001bb4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	f003 0304 	and.w	r3, r3, #4
 8001bae:	2b04      	cmp	r3, #4
 8001bb0:	d1ca      	bne.n	8001b48 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001bc8:	e042      	b.n	8001c50 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	695b      	ldr	r3, [r3, #20]
 8001bd0:	f003 0310 	and.w	r3, r3, #16
 8001bd4:	2b10      	cmp	r3, #16
 8001bd6:	d119      	bne.n	8001c0c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f06f 0210 	mvn.w	r2, #16
 8001be0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2200      	movs	r2, #0
 8001be6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2220      	movs	r2, #32
 8001bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e029      	b.n	8001c60 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c0c:	f7fe fcca 	bl	80005a4 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	1ad2      	subs	r2, r2, r3
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d802      	bhi.n	8001c22 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d116      	bne.n	8001c50 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2200      	movs	r2, #0
 8001c26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2220      	movs	r2, #32
 8001c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3c:	f043 0220 	orr.w	r2, r3, #32
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e007      	b.n	8001c60 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	695b      	ldr	r3, [r3, #20]
 8001c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c5a:	2b40      	cmp	r3, #64	; 0x40
 8001c5c:	d1b5      	bne.n	8001bca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3710      	adds	r7, #16
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	695b      	ldr	r3, [r3, #20]
 8001c76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c7e:	d11b      	bne.n	8001cb8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001c88:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2220      	movs	r2, #32
 8001c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca4:	f043 0204 	orr.w	r2, r3, #4
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e000      	b.n	8001cba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
	...

08001cc8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d101      	bne.n	8001cda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e25b      	b.n	8002192 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d075      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ce6:	4ba3      	ldr	r3, [pc, #652]	; (8001f74 <HAL_RCC_OscConfig+0x2ac>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f003 030c 	and.w	r3, r3, #12
 8001cee:	2b04      	cmp	r3, #4
 8001cf0:	d00c      	beq.n	8001d0c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cf2:	4ba0      	ldr	r3, [pc, #640]	; (8001f74 <HAL_RCC_OscConfig+0x2ac>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001cfa:	2b08      	cmp	r3, #8
 8001cfc:	d112      	bne.n	8001d24 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cfe:	4b9d      	ldr	r3, [pc, #628]	; (8001f74 <HAL_RCC_OscConfig+0x2ac>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d0a:	d10b      	bne.n	8001d24 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d0c:	4b99      	ldr	r3, [pc, #612]	; (8001f74 <HAL_RCC_OscConfig+0x2ac>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d05b      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x108>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d157      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e236      	b.n	8002192 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d2c:	d106      	bne.n	8001d3c <HAL_RCC_OscConfig+0x74>
 8001d2e:	4a91      	ldr	r2, [pc, #580]	; (8001f74 <HAL_RCC_OscConfig+0x2ac>)
 8001d30:	4b90      	ldr	r3, [pc, #576]	; (8001f74 <HAL_RCC_OscConfig+0x2ac>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d38:	6013      	str	r3, [r2, #0]
 8001d3a:	e01d      	b.n	8001d78 <HAL_RCC_OscConfig+0xb0>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d44:	d10c      	bne.n	8001d60 <HAL_RCC_OscConfig+0x98>
 8001d46:	4a8b      	ldr	r2, [pc, #556]	; (8001f74 <HAL_RCC_OscConfig+0x2ac>)
 8001d48:	4b8a      	ldr	r3, [pc, #552]	; (8001f74 <HAL_RCC_OscConfig+0x2ac>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d50:	6013      	str	r3, [r2, #0]
 8001d52:	4a88      	ldr	r2, [pc, #544]	; (8001f74 <HAL_RCC_OscConfig+0x2ac>)
 8001d54:	4b87      	ldr	r3, [pc, #540]	; (8001f74 <HAL_RCC_OscConfig+0x2ac>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d5c:	6013      	str	r3, [r2, #0]
 8001d5e:	e00b      	b.n	8001d78 <HAL_RCC_OscConfig+0xb0>
 8001d60:	4a84      	ldr	r2, [pc, #528]	; (8001f74 <HAL_RCC_OscConfig+0x2ac>)
 8001d62:	4b84      	ldr	r3, [pc, #528]	; (8001f74 <HAL_RCC_OscConfig+0x2ac>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d6a:	6013      	str	r3, [r2, #0]
 8001d6c:	4a81      	ldr	r2, [pc, #516]	; (8001f74 <HAL_RCC_OscConfig+0x2ac>)
 8001d6e:	4b81      	ldr	r3, [pc, #516]	; (8001f74 <HAL_RCC_OscConfig+0x2ac>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d013      	beq.n	8001da8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d80:	f7fe fc10 	bl	80005a4 <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d88:	f7fe fc0c 	bl	80005a4 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b64      	cmp	r3, #100	; 0x64
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e1fb      	b.n	8002192 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d9a:	4b76      	ldr	r3, [pc, #472]	; (8001f74 <HAL_RCC_OscConfig+0x2ac>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d0f0      	beq.n	8001d88 <HAL_RCC_OscConfig+0xc0>
 8001da6:	e014      	b.n	8001dd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da8:	f7fe fbfc 	bl	80005a4 <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001db0:	f7fe fbf8 	bl	80005a4 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b64      	cmp	r3, #100	; 0x64
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e1e7      	b.n	8002192 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dc2:	4b6c      	ldr	r3, [pc, #432]	; (8001f74 <HAL_RCC_OscConfig+0x2ac>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1f0      	bne.n	8001db0 <HAL_RCC_OscConfig+0xe8>
 8001dce:	e000      	b.n	8001dd2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d063      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001dde:	4b65      	ldr	r3, [pc, #404]	; (8001f74 <HAL_RCC_OscConfig+0x2ac>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f003 030c 	and.w	r3, r3, #12
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d00b      	beq.n	8001e02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dea:	4b62      	ldr	r3, [pc, #392]	; (8001f74 <HAL_RCC_OscConfig+0x2ac>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001df2:	2b08      	cmp	r3, #8
 8001df4:	d11c      	bne.n	8001e30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001df6:	4b5f      	ldr	r3, [pc, #380]	; (8001f74 <HAL_RCC_OscConfig+0x2ac>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d116      	bne.n	8001e30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e02:	4b5c      	ldr	r3, [pc, #368]	; (8001f74 <HAL_RCC_OscConfig+0x2ac>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d005      	beq.n	8001e1a <HAL_RCC_OscConfig+0x152>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d001      	beq.n	8001e1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e1bb      	b.n	8002192 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e1a:	4956      	ldr	r1, [pc, #344]	; (8001f74 <HAL_RCC_OscConfig+0x2ac>)
 8001e1c:	4b55      	ldr	r3, [pc, #340]	; (8001f74 <HAL_RCC_OscConfig+0x2ac>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	691b      	ldr	r3, [r3, #16]
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e2e:	e03a      	b.n	8001ea6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d020      	beq.n	8001e7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e38:	4b4f      	ldr	r3, [pc, #316]	; (8001f78 <HAL_RCC_OscConfig+0x2b0>)
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e3e:	f7fe fbb1 	bl	80005a4 <HAL_GetTick>
 8001e42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e44:	e008      	b.n	8001e58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e46:	f7fe fbad 	bl	80005a4 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e19c      	b.n	8002192 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e58:	4b46      	ldr	r3, [pc, #280]	; (8001f74 <HAL_RCC_OscConfig+0x2ac>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d0f0      	beq.n	8001e46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e64:	4943      	ldr	r1, [pc, #268]	; (8001f74 <HAL_RCC_OscConfig+0x2ac>)
 8001e66:	4b43      	ldr	r3, [pc, #268]	; (8001f74 <HAL_RCC_OscConfig+0x2ac>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	4313      	orrs	r3, r2
 8001e76:	600b      	str	r3, [r1, #0]
 8001e78:	e015      	b.n	8001ea6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e7a:	4b3f      	ldr	r3, [pc, #252]	; (8001f78 <HAL_RCC_OscConfig+0x2b0>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e80:	f7fe fb90 	bl	80005a4 <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e88:	f7fe fb8c 	bl	80005a4 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e17b      	b.n	8002192 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e9a:	4b36      	ldr	r3, [pc, #216]	; (8001f74 <HAL_RCC_OscConfig+0x2ac>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1f0      	bne.n	8001e88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0308 	and.w	r3, r3, #8
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d030      	beq.n	8001f14 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	695b      	ldr	r3, [r3, #20]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d016      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eba:	4b30      	ldr	r3, [pc, #192]	; (8001f7c <HAL_RCC_OscConfig+0x2b4>)
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ec0:	f7fe fb70 	bl	80005a4 <HAL_GetTick>
 8001ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ec8:	f7fe fb6c 	bl	80005a4 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e15b      	b.n	8002192 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eda:	4b26      	ldr	r3, [pc, #152]	; (8001f74 <HAL_RCC_OscConfig+0x2ac>)
 8001edc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d0f0      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x200>
 8001ee6:	e015      	b.n	8001f14 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ee8:	4b24      	ldr	r3, [pc, #144]	; (8001f7c <HAL_RCC_OscConfig+0x2b4>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eee:	f7fe fb59 	bl	80005a4 <HAL_GetTick>
 8001ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ef4:	e008      	b.n	8001f08 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ef6:	f7fe fb55 	bl	80005a4 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e144      	b.n	8002192 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f08:	4b1a      	ldr	r3, [pc, #104]	; (8001f74 <HAL_RCC_OscConfig+0x2ac>)
 8001f0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f0c:	f003 0302 	and.w	r3, r3, #2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d1f0      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0304 	and.w	r3, r3, #4
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f000 80a0 	beq.w	8002062 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f22:	2300      	movs	r3, #0
 8001f24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f26:	4b13      	ldr	r3, [pc, #76]	; (8001f74 <HAL_RCC_OscConfig+0x2ac>)
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d10f      	bne.n	8001f52 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	60bb      	str	r3, [r7, #8]
 8001f36:	4a0f      	ldr	r2, [pc, #60]	; (8001f74 <HAL_RCC_OscConfig+0x2ac>)
 8001f38:	4b0e      	ldr	r3, [pc, #56]	; (8001f74 <HAL_RCC_OscConfig+0x2ac>)
 8001f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f40:	6413      	str	r3, [r2, #64]	; 0x40
 8001f42:	4b0c      	ldr	r3, [pc, #48]	; (8001f74 <HAL_RCC_OscConfig+0x2ac>)
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f4a:	60bb      	str	r3, [r7, #8]
 8001f4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f52:	4b0b      	ldr	r3, [pc, #44]	; (8001f80 <HAL_RCC_OscConfig+0x2b8>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d121      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f5e:	4a08      	ldr	r2, [pc, #32]	; (8001f80 <HAL_RCC_OscConfig+0x2b8>)
 8001f60:	4b07      	ldr	r3, [pc, #28]	; (8001f80 <HAL_RCC_OscConfig+0x2b8>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f6a:	f7fe fb1b 	bl	80005a4 <HAL_GetTick>
 8001f6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f70:	e011      	b.n	8001f96 <HAL_RCC_OscConfig+0x2ce>
 8001f72:	bf00      	nop
 8001f74:	40023800 	.word	0x40023800
 8001f78:	42470000 	.word	0x42470000
 8001f7c:	42470e80 	.word	0x42470e80
 8001f80:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f84:	f7fe fb0e 	bl	80005a4 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e0fd      	b.n	8002192 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f96:	4b81      	ldr	r3, [pc, #516]	; (800219c <HAL_RCC_OscConfig+0x4d4>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d0f0      	beq.n	8001f84 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d106      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x2f0>
 8001faa:	4a7d      	ldr	r2, [pc, #500]	; (80021a0 <HAL_RCC_OscConfig+0x4d8>)
 8001fac:	4b7c      	ldr	r3, [pc, #496]	; (80021a0 <HAL_RCC_OscConfig+0x4d8>)
 8001fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb0:	f043 0301 	orr.w	r3, r3, #1
 8001fb4:	6713      	str	r3, [r2, #112]	; 0x70
 8001fb6:	e01c      	b.n	8001ff2 <HAL_RCC_OscConfig+0x32a>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	2b05      	cmp	r3, #5
 8001fbe:	d10c      	bne.n	8001fda <HAL_RCC_OscConfig+0x312>
 8001fc0:	4a77      	ldr	r2, [pc, #476]	; (80021a0 <HAL_RCC_OscConfig+0x4d8>)
 8001fc2:	4b77      	ldr	r3, [pc, #476]	; (80021a0 <HAL_RCC_OscConfig+0x4d8>)
 8001fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fc6:	f043 0304 	orr.w	r3, r3, #4
 8001fca:	6713      	str	r3, [r2, #112]	; 0x70
 8001fcc:	4a74      	ldr	r2, [pc, #464]	; (80021a0 <HAL_RCC_OscConfig+0x4d8>)
 8001fce:	4b74      	ldr	r3, [pc, #464]	; (80021a0 <HAL_RCC_OscConfig+0x4d8>)
 8001fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd2:	f043 0301 	orr.w	r3, r3, #1
 8001fd6:	6713      	str	r3, [r2, #112]	; 0x70
 8001fd8:	e00b      	b.n	8001ff2 <HAL_RCC_OscConfig+0x32a>
 8001fda:	4a71      	ldr	r2, [pc, #452]	; (80021a0 <HAL_RCC_OscConfig+0x4d8>)
 8001fdc:	4b70      	ldr	r3, [pc, #448]	; (80021a0 <HAL_RCC_OscConfig+0x4d8>)
 8001fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe0:	f023 0301 	bic.w	r3, r3, #1
 8001fe4:	6713      	str	r3, [r2, #112]	; 0x70
 8001fe6:	4a6e      	ldr	r2, [pc, #440]	; (80021a0 <HAL_RCC_OscConfig+0x4d8>)
 8001fe8:	4b6d      	ldr	r3, [pc, #436]	; (80021a0 <HAL_RCC_OscConfig+0x4d8>)
 8001fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fec:	f023 0304 	bic.w	r3, r3, #4
 8001ff0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d015      	beq.n	8002026 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ffa:	f7fe fad3 	bl	80005a4 <HAL_GetTick>
 8001ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002000:	e00a      	b.n	8002018 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002002:	f7fe facf 	bl	80005a4 <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002010:	4293      	cmp	r3, r2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e0bc      	b.n	8002192 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002018:	4b61      	ldr	r3, [pc, #388]	; (80021a0 <HAL_RCC_OscConfig+0x4d8>)
 800201a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d0ee      	beq.n	8002002 <HAL_RCC_OscConfig+0x33a>
 8002024:	e014      	b.n	8002050 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002026:	f7fe fabd 	bl	80005a4 <HAL_GetTick>
 800202a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800202c:	e00a      	b.n	8002044 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800202e:	f7fe fab9 	bl	80005a4 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	f241 3288 	movw	r2, #5000	; 0x1388
 800203c:	4293      	cmp	r3, r2
 800203e:	d901      	bls.n	8002044 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e0a6      	b.n	8002192 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002044:	4b56      	ldr	r3, [pc, #344]	; (80021a0 <HAL_RCC_OscConfig+0x4d8>)
 8002046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1ee      	bne.n	800202e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002050:	7dfb      	ldrb	r3, [r7, #23]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d105      	bne.n	8002062 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002056:	4a52      	ldr	r2, [pc, #328]	; (80021a0 <HAL_RCC_OscConfig+0x4d8>)
 8002058:	4b51      	ldr	r3, [pc, #324]	; (80021a0 <HAL_RCC_OscConfig+0x4d8>)
 800205a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002060:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	699b      	ldr	r3, [r3, #24]
 8002066:	2b00      	cmp	r3, #0
 8002068:	f000 8092 	beq.w	8002190 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800206c:	4b4c      	ldr	r3, [pc, #304]	; (80021a0 <HAL_RCC_OscConfig+0x4d8>)
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f003 030c 	and.w	r3, r3, #12
 8002074:	2b08      	cmp	r3, #8
 8002076:	d05c      	beq.n	8002132 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	2b02      	cmp	r3, #2
 800207e:	d141      	bne.n	8002104 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002080:	4b48      	ldr	r3, [pc, #288]	; (80021a4 <HAL_RCC_OscConfig+0x4dc>)
 8002082:	2200      	movs	r2, #0
 8002084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002086:	f7fe fa8d 	bl	80005a4 <HAL_GetTick>
 800208a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800208c:	e008      	b.n	80020a0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800208e:	f7fe fa89 	bl	80005a4 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e078      	b.n	8002192 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020a0:	4b3f      	ldr	r3, [pc, #252]	; (80021a0 <HAL_RCC_OscConfig+0x4d8>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1f0      	bne.n	800208e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020ac:	493c      	ldr	r1, [pc, #240]	; (80021a0 <HAL_RCC_OscConfig+0x4d8>)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	69da      	ldr	r2, [r3, #28]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a1b      	ldr	r3, [r3, #32]
 80020b6:	431a      	orrs	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020bc:	019b      	lsls	r3, r3, #6
 80020be:	431a      	orrs	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c4:	085b      	lsrs	r3, r3, #1
 80020c6:	3b01      	subs	r3, #1
 80020c8:	041b      	lsls	r3, r3, #16
 80020ca:	431a      	orrs	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d0:	061b      	lsls	r3, r3, #24
 80020d2:	4313      	orrs	r3, r2
 80020d4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020d6:	4b33      	ldr	r3, [pc, #204]	; (80021a4 <HAL_RCC_OscConfig+0x4dc>)
 80020d8:	2201      	movs	r2, #1
 80020da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020dc:	f7fe fa62 	bl	80005a4 <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020e4:	f7fe fa5e 	bl	80005a4 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e04d      	b.n	8002192 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020f6:	4b2a      	ldr	r3, [pc, #168]	; (80021a0 <HAL_RCC_OscConfig+0x4d8>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d0f0      	beq.n	80020e4 <HAL_RCC_OscConfig+0x41c>
 8002102:	e045      	b.n	8002190 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002104:	4b27      	ldr	r3, [pc, #156]	; (80021a4 <HAL_RCC_OscConfig+0x4dc>)
 8002106:	2200      	movs	r2, #0
 8002108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210a:	f7fe fa4b 	bl	80005a4 <HAL_GetTick>
 800210e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002110:	e008      	b.n	8002124 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002112:	f7fe fa47 	bl	80005a4 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d901      	bls.n	8002124 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e036      	b.n	8002192 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002124:	4b1e      	ldr	r3, [pc, #120]	; (80021a0 <HAL_RCC_OscConfig+0x4d8>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d1f0      	bne.n	8002112 <HAL_RCC_OscConfig+0x44a>
 8002130:	e02e      	b.n	8002190 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d101      	bne.n	800213e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e029      	b.n	8002192 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800213e:	4b18      	ldr	r3, [pc, #96]	; (80021a0 <HAL_RCC_OscConfig+0x4d8>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	69db      	ldr	r3, [r3, #28]
 800214e:	429a      	cmp	r2, r3
 8002150:	d11c      	bne.n	800218c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800215c:	429a      	cmp	r2, r3
 800215e:	d115      	bne.n	800218c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002166:	4013      	ands	r3, r2
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800216c:	4293      	cmp	r3, r2
 800216e:	d10d      	bne.n	800218c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800217a:	429a      	cmp	r2, r3
 800217c:	d106      	bne.n	800218c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002188:	429a      	cmp	r2, r3
 800218a:	d001      	beq.n	8002190 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e000      	b.n	8002192 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3718      	adds	r7, #24
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	40007000 	.word	0x40007000
 80021a0:	40023800 	.word	0x40023800
 80021a4:	42470060 	.word	0x42470060

080021a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d101      	bne.n	80021bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e0cc      	b.n	8002356 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021bc:	4b68      	ldr	r3, [pc, #416]	; (8002360 <HAL_RCC_ClockConfig+0x1b8>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 020f 	and.w	r2, r3, #15
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d20c      	bcs.n	80021e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ca:	4b65      	ldr	r3, [pc, #404]	; (8002360 <HAL_RCC_ClockConfig+0x1b8>)
 80021cc:	683a      	ldr	r2, [r7, #0]
 80021ce:	b2d2      	uxtb	r2, r2
 80021d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021d2:	4b63      	ldr	r3, [pc, #396]	; (8002360 <HAL_RCC_ClockConfig+0x1b8>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 020f 	and.w	r2, r3, #15
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d001      	beq.n	80021e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e0b8      	b.n	8002356 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d020      	beq.n	8002232 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0304 	and.w	r3, r3, #4
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d005      	beq.n	8002208 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021fc:	4a59      	ldr	r2, [pc, #356]	; (8002364 <HAL_RCC_ClockConfig+0x1bc>)
 80021fe:	4b59      	ldr	r3, [pc, #356]	; (8002364 <HAL_RCC_ClockConfig+0x1bc>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002206:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0308 	and.w	r3, r3, #8
 8002210:	2b00      	cmp	r3, #0
 8002212:	d005      	beq.n	8002220 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002214:	4a53      	ldr	r2, [pc, #332]	; (8002364 <HAL_RCC_ClockConfig+0x1bc>)
 8002216:	4b53      	ldr	r3, [pc, #332]	; (8002364 <HAL_RCC_ClockConfig+0x1bc>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800221e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002220:	4950      	ldr	r1, [pc, #320]	; (8002364 <HAL_RCC_ClockConfig+0x1bc>)
 8002222:	4b50      	ldr	r3, [pc, #320]	; (8002364 <HAL_RCC_ClockConfig+0x1bc>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	4313      	orrs	r3, r2
 8002230:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b00      	cmp	r3, #0
 800223c:	d044      	beq.n	80022c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d107      	bne.n	8002256 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002246:	4b47      	ldr	r3, [pc, #284]	; (8002364 <HAL_RCC_ClockConfig+0x1bc>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d119      	bne.n	8002286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e07f      	b.n	8002356 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	2b02      	cmp	r3, #2
 800225c:	d003      	beq.n	8002266 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002262:	2b03      	cmp	r3, #3
 8002264:	d107      	bne.n	8002276 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002266:	4b3f      	ldr	r3, [pc, #252]	; (8002364 <HAL_RCC_ClockConfig+0x1bc>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d109      	bne.n	8002286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e06f      	b.n	8002356 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002276:	4b3b      	ldr	r3, [pc, #236]	; (8002364 <HAL_RCC_ClockConfig+0x1bc>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d101      	bne.n	8002286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e067      	b.n	8002356 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002286:	4937      	ldr	r1, [pc, #220]	; (8002364 <HAL_RCC_ClockConfig+0x1bc>)
 8002288:	4b36      	ldr	r3, [pc, #216]	; (8002364 <HAL_RCC_ClockConfig+0x1bc>)
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f023 0203 	bic.w	r2, r3, #3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	4313      	orrs	r3, r2
 8002296:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002298:	f7fe f984 	bl	80005a4 <HAL_GetTick>
 800229c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800229e:	e00a      	b.n	80022b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022a0:	f7fe f980 	bl	80005a4 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e04f      	b.n	8002356 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022b6:	4b2b      	ldr	r3, [pc, #172]	; (8002364 <HAL_RCC_ClockConfig+0x1bc>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f003 020c 	and.w	r2, r3, #12
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d1eb      	bne.n	80022a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022c8:	4b25      	ldr	r3, [pc, #148]	; (8002360 <HAL_RCC_ClockConfig+0x1b8>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 020f 	and.w	r2, r3, #15
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d90c      	bls.n	80022f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022d6:	4b22      	ldr	r3, [pc, #136]	; (8002360 <HAL_RCC_ClockConfig+0x1b8>)
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	b2d2      	uxtb	r2, r2
 80022dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022de:	4b20      	ldr	r3, [pc, #128]	; (8002360 <HAL_RCC_ClockConfig+0x1b8>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 020f 	and.w	r2, r3, #15
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d001      	beq.n	80022f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e032      	b.n	8002356 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0304 	and.w	r3, r3, #4
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d008      	beq.n	800230e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022fc:	4919      	ldr	r1, [pc, #100]	; (8002364 <HAL_RCC_ClockConfig+0x1bc>)
 80022fe:	4b19      	ldr	r3, [pc, #100]	; (8002364 <HAL_RCC_ClockConfig+0x1bc>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	4313      	orrs	r3, r2
 800230c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0308 	and.w	r3, r3, #8
 8002316:	2b00      	cmp	r3, #0
 8002318:	d009      	beq.n	800232e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800231a:	4912      	ldr	r1, [pc, #72]	; (8002364 <HAL_RCC_ClockConfig+0x1bc>)
 800231c:	4b11      	ldr	r3, [pc, #68]	; (8002364 <HAL_RCC_ClockConfig+0x1bc>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	4313      	orrs	r3, r2
 800232c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800232e:	f000 f821 	bl	8002374 <HAL_RCC_GetSysClockFreq>
 8002332:	4601      	mov	r1, r0
 8002334:	4b0b      	ldr	r3, [pc, #44]	; (8002364 <HAL_RCC_ClockConfig+0x1bc>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	091b      	lsrs	r3, r3, #4
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	4a0a      	ldr	r2, [pc, #40]	; (8002368 <HAL_RCC_ClockConfig+0x1c0>)
 8002340:	5cd3      	ldrb	r3, [r2, r3]
 8002342:	fa21 f303 	lsr.w	r3, r1, r3
 8002346:	4a09      	ldr	r2, [pc, #36]	; (800236c <HAL_RCC_ClockConfig+0x1c4>)
 8002348:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800234a:	4b09      	ldr	r3, [pc, #36]	; (8002370 <HAL_RCC_ClockConfig+0x1c8>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4618      	mov	r0, r3
 8002350:	f7fe f8e4 	bl	800051c <HAL_InitTick>

  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	40023c00 	.word	0x40023c00
 8002364:	40023800 	.word	0x40023800
 8002368:	08002b20 	.word	0x08002b20
 800236c:	20000008 	.word	0x20000008
 8002370:	20000000 	.word	0x20000000

08002374 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002378:	b087      	sub	sp, #28
 800237a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800237c:	2200      	movs	r2, #0
 800237e:	60fa      	str	r2, [r7, #12]
 8002380:	2200      	movs	r2, #0
 8002382:	617a      	str	r2, [r7, #20]
 8002384:	2200      	movs	r2, #0
 8002386:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0U;
 8002388:	2200      	movs	r2, #0
 800238a:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800238c:	4a51      	ldr	r2, [pc, #324]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x160>)
 800238e:	6892      	ldr	r2, [r2, #8]
 8002390:	f002 020c 	and.w	r2, r2, #12
 8002394:	2a04      	cmp	r2, #4
 8002396:	d007      	beq.n	80023a8 <HAL_RCC_GetSysClockFreq+0x34>
 8002398:	2a08      	cmp	r2, #8
 800239a:	d008      	beq.n	80023ae <HAL_RCC_GetSysClockFreq+0x3a>
 800239c:	2a00      	cmp	r2, #0
 800239e:	f040 8090 	bne.w	80024c2 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023a2:	4b4d      	ldr	r3, [pc, #308]	; (80024d8 <HAL_RCC_GetSysClockFreq+0x164>)
 80023a4:	613b      	str	r3, [r7, #16]
       break;
 80023a6:	e08f      	b.n	80024c8 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023a8:	4b4c      	ldr	r3, [pc, #304]	; (80024dc <HAL_RCC_GetSysClockFreq+0x168>)
 80023aa:	613b      	str	r3, [r7, #16]
      break;
 80023ac:	e08c      	b.n	80024c8 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023ae:	4a49      	ldr	r2, [pc, #292]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80023b0:	6852      	ldr	r2, [r2, #4]
 80023b2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80023b6:	60fa      	str	r2, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023b8:	4a46      	ldr	r2, [pc, #280]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80023ba:	6852      	ldr	r2, [r2, #4]
 80023bc:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80023c0:	2a00      	cmp	r2, #0
 80023c2:	d023      	beq.n	800240c <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023c4:	4b43      	ldr	r3, [pc, #268]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	099b      	lsrs	r3, r3, #6
 80023ca:	f04f 0400 	mov.w	r4, #0
 80023ce:	f240 11ff 	movw	r1, #511	; 0x1ff
 80023d2:	f04f 0200 	mov.w	r2, #0
 80023d6:	ea03 0301 	and.w	r3, r3, r1
 80023da:	ea04 0402 	and.w	r4, r4, r2
 80023de:	4a3f      	ldr	r2, [pc, #252]	; (80024dc <HAL_RCC_GetSysClockFreq+0x168>)
 80023e0:	fb02 f104 	mul.w	r1, r2, r4
 80023e4:	2200      	movs	r2, #0
 80023e6:	fb02 f203 	mul.w	r2, r2, r3
 80023ea:	440a      	add	r2, r1
 80023ec:	493b      	ldr	r1, [pc, #236]	; (80024dc <HAL_RCC_GetSysClockFreq+0x168>)
 80023ee:	fba3 0101 	umull	r0, r1, r3, r1
 80023f2:	1853      	adds	r3, r2, r1
 80023f4:	4619      	mov	r1, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f04f 0400 	mov.w	r4, #0
 80023fc:	461a      	mov	r2, r3
 80023fe:	4623      	mov	r3, r4
 8002400:	f7fd fee2 	bl	80001c8 <__aeabi_uldivmod>
 8002404:	4603      	mov	r3, r0
 8002406:	460c      	mov	r4, r1
 8002408:	617b      	str	r3, [r7, #20]
 800240a:	e04c      	b.n	80024a6 <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800240c:	4a31      	ldr	r2, [pc, #196]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x160>)
 800240e:	6852      	ldr	r2, [r2, #4]
 8002410:	0992      	lsrs	r2, r2, #6
 8002412:	4611      	mov	r1, r2
 8002414:	f04f 0200 	mov.w	r2, #0
 8002418:	f240 15ff 	movw	r5, #511	; 0x1ff
 800241c:	f04f 0600 	mov.w	r6, #0
 8002420:	ea05 0501 	and.w	r5, r5, r1
 8002424:	ea06 0602 	and.w	r6, r6, r2
 8002428:	4629      	mov	r1, r5
 800242a:	4632      	mov	r2, r6
 800242c:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8002430:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 8002434:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 8002438:	4651      	mov	r1, sl
 800243a:	465a      	mov	r2, fp
 800243c:	46aa      	mov	sl, r5
 800243e:	46b3      	mov	fp, r6
 8002440:	4655      	mov	r5, sl
 8002442:	465e      	mov	r6, fp
 8002444:	1b4d      	subs	r5, r1, r5
 8002446:	eb62 0606 	sbc.w	r6, r2, r6
 800244a:	4629      	mov	r1, r5
 800244c:	4632      	mov	r2, r6
 800244e:	0194      	lsls	r4, r2, #6
 8002450:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002454:	018b      	lsls	r3, r1, #6
 8002456:	1a5b      	subs	r3, r3, r1
 8002458:	eb64 0402 	sbc.w	r4, r4, r2
 800245c:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8002460:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8002464:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8002468:	4643      	mov	r3, r8
 800246a:	464c      	mov	r4, r9
 800246c:	4655      	mov	r5, sl
 800246e:	465e      	mov	r6, fp
 8002470:	18ed      	adds	r5, r5, r3
 8002472:	eb46 0604 	adc.w	r6, r6, r4
 8002476:	462b      	mov	r3, r5
 8002478:	4634      	mov	r4, r6
 800247a:	02a2      	lsls	r2, r4, #10
 800247c:	607a      	str	r2, [r7, #4]
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002484:	607a      	str	r2, [r7, #4]
 8002486:	029b      	lsls	r3, r3, #10
 8002488:	603b      	str	r3, [r7, #0]
 800248a:	e897 0018 	ldmia.w	r7, {r3, r4}
 800248e:	4618      	mov	r0, r3
 8002490:	4621      	mov	r1, r4
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f04f 0400 	mov.w	r4, #0
 8002498:	461a      	mov	r2, r3
 800249a:	4623      	mov	r3, r4
 800249c:	f7fd fe94 	bl	80001c8 <__aeabi_uldivmod>
 80024a0:	4603      	mov	r3, r0
 80024a2:	460c      	mov	r4, r1
 80024a4:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024a6:	4b0b      	ldr	r3, [pc, #44]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	0c1b      	lsrs	r3, r3, #16
 80024ac:	f003 0303 	and.w	r3, r3, #3
 80024b0:	3301      	adds	r3, #1
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80024b6:	697a      	ldr	r2, [r7, #20]
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80024be:	613b      	str	r3, [r7, #16]
      break;
 80024c0:	e002      	b.n	80024c8 <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024c2:	4b05      	ldr	r3, [pc, #20]	; (80024d8 <HAL_RCC_GetSysClockFreq+0x164>)
 80024c4:	613b      	str	r3, [r7, #16]
      break;
 80024c6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024c8:	693b      	ldr	r3, [r7, #16]
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	371c      	adds	r7, #28
 80024ce:	46bd      	mov	sp, r7
 80024d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024d4:	40023800 	.word	0x40023800
 80024d8:	00f42400 	.word	0x00f42400
 80024dc:	017d7840 	.word	0x017d7840

080024e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024e4:	4b03      	ldr	r3, [pc, #12]	; (80024f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80024e6:	681b      	ldr	r3, [r3, #0]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	20000008 	.word	0x20000008

080024f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024fc:	f7ff fff0 	bl	80024e0 <HAL_RCC_GetHCLKFreq>
 8002500:	4601      	mov	r1, r0
 8002502:	4b05      	ldr	r3, [pc, #20]	; (8002518 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	0a9b      	lsrs	r3, r3, #10
 8002508:	f003 0307 	and.w	r3, r3, #7
 800250c:	4a03      	ldr	r2, [pc, #12]	; (800251c <HAL_RCC_GetPCLK1Freq+0x24>)
 800250e:	5cd3      	ldrb	r3, [r2, r3]
 8002510:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002514:	4618      	mov	r0, r3
 8002516:	bd80      	pop	{r7, pc}
 8002518:	40023800 	.word	0x40023800
 800251c:	08002b30 	.word	0x08002b30

08002520 <adress_finder>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void adress_finder(){
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
	for(adress = 0; adress <= 255; adress++){
 8002524:	4b0e      	ldr	r3, [pc, #56]	; (8002560 <adress_finder+0x40>)
 8002526:	2200      	movs	r2, #0
 8002528:	701a      	strb	r2, [r3, #0]
		if(HAL_I2C_IsDeviceReady(&hi2c1, adress, 1, 100) == HAL_OK){
 800252a:	4b0d      	ldr	r3, [pc, #52]	; (8002560 <adress_finder+0x40>)
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	b299      	uxth	r1, r3
 8002530:	2364      	movs	r3, #100	; 0x64
 8002532:	2201      	movs	r2, #1
 8002534:	480b      	ldr	r0, [pc, #44]	; (8002564 <adress_finder+0x44>)
 8002536:	f7fe ff57 	bl	80013e8 <HAL_I2C_IsDeviceReady>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d106      	bne.n	800254e <adress_finder+0x2e>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, SET);
 8002540:	2201      	movs	r2, #1
 8002542:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002546:	4808      	ldr	r0, [pc, #32]	; (8002568 <adress_finder+0x48>)
 8002548:	f7fe fad8 	bl	8000afc <HAL_GPIO_WritePin>
			break;
 800254c:	e006      	b.n	800255c <adress_finder+0x3c>
	for(adress = 0; adress <= 255; adress++){
 800254e:	4b04      	ldr	r3, [pc, #16]	; (8002560 <adress_finder+0x40>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	3301      	adds	r3, #1
 8002554:	b2da      	uxtb	r2, r3
 8002556:	4b02      	ldr	r3, [pc, #8]	; (8002560 <adress_finder+0x40>)
 8002558:	701a      	strb	r2, [r3, #0]
		if(HAL_I2C_IsDeviceReady(&hi2c1, adress, 1, 100) == HAL_OK){
 800255a:	e7e6      	b.n	800252a <adress_finder+0xa>
		}
	}

}
 800255c:	bf00      	nop
 800255e:	bd80      	pop	{r7, pc}
 8002560:	20000028 	.word	0x20000028
 8002564:	20000038 	.word	0x20000038
 8002568:	40020c00 	.word	0x40020c00

0800256c <ADXL345_Init>:

void ADXL345_Init(){
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af04      	add	r7, sp, #16
	static uint8_t cases = 0;
	switch(cases){
 8002572:	4b34      	ldr	r3, [pc, #208]	; (8002644 <ADXL345_Init+0xd8>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	2b03      	cmp	r3, #3
 8002578:	d861      	bhi.n	800263e <ADXL345_Init+0xd2>
 800257a:	a201      	add	r2, pc, #4	; (adr r2, 8002580 <ADXL345_Init+0x14>)
 800257c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002580:	08002591 	.word	0x08002591
 8002584:	080025c7 	.word	0x080025c7
 8002588:	080025f1 	.word	0x080025f1
 800258c:	0800261b 	.word	0x0800261b
	case 0:
		HAL_I2C_Mem_Read(&hi2c1, ADXL_SLAVE_ADRESS, 0x00, 1, myDatas, 1, 100); // Is device OKAY ?
 8002590:	2364      	movs	r3, #100	; 0x64
 8002592:	9302      	str	r3, [sp, #8]
 8002594:	2301      	movs	r3, #1
 8002596:	9301      	str	r3, [sp, #4]
 8002598:	4b2b      	ldr	r3, [pc, #172]	; (8002648 <ADXL345_Init+0xdc>)
 800259a:	9300      	str	r3, [sp, #0]
 800259c:	2301      	movs	r3, #1
 800259e:	2200      	movs	r2, #0
 80025a0:	21a6      	movs	r1, #166	; 0xa6
 80025a2:	482a      	ldr	r0, [pc, #168]	; (800264c <ADXL345_Init+0xe0>)
 80025a4:	f7fe fcfa 	bl	8000f9c <HAL_I2C_Mem_Read>
		HAL_Delay(100);
 80025a8:	2064      	movs	r0, #100	; 0x64
 80025aa:	f7fe f807 	bl	80005bc <HAL_Delay>
		if(myDatas[0] == 229){
 80025ae:	4b26      	ldr	r3, [pc, #152]	; (8002648 <ADXL345_Init+0xdc>)
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	2be5      	cmp	r3, #229	; 0xe5
 80025b4:	d103      	bne.n	80025be <ADXL345_Init+0x52>
			cases = 1;
 80025b6:	4b23      	ldr	r3, [pc, #140]	; (8002644 <ADXL345_Init+0xd8>)
 80025b8:	2201      	movs	r2, #1
 80025ba:	701a      	strb	r2, [r3, #0]
		}
		else{
			cases = 0;
		}
		break;
 80025bc:	e03f      	b.n	800263e <ADXL345_Init+0xd2>
			cases = 0;
 80025be:	4b21      	ldr	r3, [pc, #132]	; (8002644 <ADXL345_Init+0xd8>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	701a      	strb	r2, [r3, #0]
		break;
 80025c4:	e03b      	b.n	800263e <ADXL345_Init+0xd2>
	case 1:
		data[0] = 0x2D;
 80025c6:	4b22      	ldr	r3, [pc, #136]	; (8002650 <ADXL345_Init+0xe4>)
 80025c8:	222d      	movs	r2, #45	; 0x2d
 80025ca:	701a      	strb	r2, [r3, #0]
		data[1] = 0;
 80025cc:	4b20      	ldr	r3, [pc, #128]	; (8002650 <ADXL345_Init+0xe4>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, ADXL_SLAVE_ADRESS, data, 2, 100); //Reset power control bits
 80025d2:	2364      	movs	r3, #100	; 0x64
 80025d4:	9300      	str	r3, [sp, #0]
 80025d6:	2302      	movs	r3, #2
 80025d8:	4a1d      	ldr	r2, [pc, #116]	; (8002650 <ADXL345_Init+0xe4>)
 80025da:	21a6      	movs	r1, #166	; 0xa6
 80025dc:	481b      	ldr	r0, [pc, #108]	; (800264c <ADXL345_Init+0xe0>)
 80025de:	f7fe fbdf 	bl	8000da0 <HAL_I2C_Master_Transmit>
		HAL_Delay(100);
 80025e2:	2064      	movs	r0, #100	; 0x64
 80025e4:	f7fd ffea 	bl	80005bc <HAL_Delay>
		cases = 2;
 80025e8:	4b16      	ldr	r3, [pc, #88]	; (8002644 <ADXL345_Init+0xd8>)
 80025ea:	2202      	movs	r2, #2
 80025ec:	701a      	strb	r2, [r3, #0]
		break;
 80025ee:	e026      	b.n	800263e <ADXL345_Init+0xd2>
	case 2:
		data[0] = 0x2D;
 80025f0:	4b17      	ldr	r3, [pc, #92]	; (8002650 <ADXL345_Init+0xe4>)
 80025f2:	222d      	movs	r2, #45	; 0x2d
 80025f4:	701a      	strb	r2, [r3, #0]
		data[1] = 0x08;
 80025f6:	4b16      	ldr	r3, [pc, #88]	; (8002650 <ADXL345_Init+0xe4>)
 80025f8:	2208      	movs	r2, #8
 80025fa:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, ADXL_SLAVE_ADRESS, data, 2, 100); // Only Measure mode active
 80025fc:	2364      	movs	r3, #100	; 0x64
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	2302      	movs	r3, #2
 8002602:	4a13      	ldr	r2, [pc, #76]	; (8002650 <ADXL345_Init+0xe4>)
 8002604:	21a6      	movs	r1, #166	; 0xa6
 8002606:	4811      	ldr	r0, [pc, #68]	; (800264c <ADXL345_Init+0xe0>)
 8002608:	f7fe fbca 	bl	8000da0 <HAL_I2C_Master_Transmit>
		HAL_Delay(100);
 800260c:	2064      	movs	r0, #100	; 0x64
 800260e:	f7fd ffd5 	bl	80005bc <HAL_Delay>
		cases = 3;
 8002612:	4b0c      	ldr	r3, [pc, #48]	; (8002644 <ADXL345_Init+0xd8>)
 8002614:	2203      	movs	r2, #3
 8002616:	701a      	strb	r2, [r3, #0]
		break;
 8002618:	e011      	b.n	800263e <ADXL345_Init+0xd2>
	case 3:
		data[0] = 0x31;
 800261a:	4b0d      	ldr	r3, [pc, #52]	; (8002650 <ADXL345_Init+0xe4>)
 800261c:	2231      	movs	r2, #49	; 0x31
 800261e:	701a      	strb	r2, [r3, #0]
		data[1] = 0x01;
 8002620:	4b0b      	ldr	r3, [pc, #44]	; (8002650 <ADXL345_Init+0xe4>)
 8002622:	2201      	movs	r2, #1
 8002624:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, ADXL_SLAVE_ADRESS, data, 2, 100); //+- 4g range
 8002626:	2364      	movs	r3, #100	; 0x64
 8002628:	9300      	str	r3, [sp, #0]
 800262a:	2302      	movs	r3, #2
 800262c:	4a08      	ldr	r2, [pc, #32]	; (8002650 <ADXL345_Init+0xe4>)
 800262e:	21a6      	movs	r1, #166	; 0xa6
 8002630:	4806      	ldr	r0, [pc, #24]	; (800264c <ADXL345_Init+0xe0>)
 8002632:	f7fe fbb5 	bl	8000da0 <HAL_I2C_Master_Transmit>
		HAL_Delay(100);
 8002636:	2064      	movs	r0, #100	; 0x64
 8002638:	f7fd ffc0 	bl	80005bc <HAL_Delay>
		break;
 800263c:	bf00      	nop
	}
}
 800263e:	bf00      	nop
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	2000002e 	.word	0x2000002e
 8002648:	2000008c 	.word	0x2000008c
 800264c:	20000038 	.word	0x20000038
 8002650:	2000002c 	.word	0x2000002c

08002654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af04      	add	r7, sp, #16
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800265a:	f7fd ff3d 	bl	80004d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800265e:	f000 f849 	bl	80026f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002662:	f000 f8df 	bl	8002824 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002666:	f000 f8af 	bl	80027c8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  adress_finder();
 800266a:	f7ff ff59 	bl	8002520 <adress_finder>
  for(int i = 0; i<=3; i++){
 800266e:	2300      	movs	r3, #0
 8002670:	607b      	str	r3, [r7, #4]
 8002672:	e004      	b.n	800267e <main+0x2a>
	  ADXL345_Init();
 8002674:	f7ff ff7a 	bl	800256c <ADXL345_Init>
  for(int i = 0; i<=3; i++){
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	3301      	adds	r3, #1
 800267c:	607b      	str	r3, [r7, #4]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2b03      	cmp	r3, #3
 8002682:	ddf7      	ble.n	8002674 <main+0x20>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_I2C_Mem_Read(&hi2c1, ADXL_SLAVE_ADRESS, 0x32, 1, myDatas, 6, 100);
 8002684:	2364      	movs	r3, #100	; 0x64
 8002686:	9302      	str	r3, [sp, #8]
 8002688:	2306      	movs	r3, #6
 800268a:	9301      	str	r3, [sp, #4]
 800268c:	4b14      	ldr	r3, [pc, #80]	; (80026e0 <main+0x8c>)
 800268e:	9300      	str	r3, [sp, #0]
 8002690:	2301      	movs	r3, #1
 8002692:	2232      	movs	r2, #50	; 0x32
 8002694:	21a6      	movs	r1, #166	; 0xa6
 8002696:	4813      	ldr	r0, [pc, #76]	; (80026e4 <main+0x90>)
 8002698:	f7fe fc80 	bl	8000f9c <HAL_I2C_Mem_Read>
	  x = (myDatas[1]) << 8 | myDatas[0];
 800269c:	4b10      	ldr	r3, [pc, #64]	; (80026e0 <main+0x8c>)
 800269e:	785b      	ldrb	r3, [r3, #1]
 80026a0:	021b      	lsls	r3, r3, #8
 80026a2:	b21a      	sxth	r2, r3
 80026a4:	4b0e      	ldr	r3, [pc, #56]	; (80026e0 <main+0x8c>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	b21b      	sxth	r3, r3
 80026aa:	4313      	orrs	r3, r2
 80026ac:	b21a      	sxth	r2, r3
 80026ae:	4b0e      	ldr	r3, [pc, #56]	; (80026e8 <main+0x94>)
 80026b0:	801a      	strh	r2, [r3, #0]
	  y = (myDatas[3]) << 8 | myDatas[2];
 80026b2:	4b0b      	ldr	r3, [pc, #44]	; (80026e0 <main+0x8c>)
 80026b4:	78db      	ldrb	r3, [r3, #3]
 80026b6:	021b      	lsls	r3, r3, #8
 80026b8:	b21a      	sxth	r2, r3
 80026ba:	4b09      	ldr	r3, [pc, #36]	; (80026e0 <main+0x8c>)
 80026bc:	789b      	ldrb	r3, [r3, #2]
 80026be:	b21b      	sxth	r3, r3
 80026c0:	4313      	orrs	r3, r2
 80026c2:	b21a      	sxth	r2, r3
 80026c4:	4b09      	ldr	r3, [pc, #36]	; (80026ec <main+0x98>)
 80026c6:	801a      	strh	r2, [r3, #0]
	  z = (myDatas[5]) << 8 | myDatas[4];
 80026c8:	4b05      	ldr	r3, [pc, #20]	; (80026e0 <main+0x8c>)
 80026ca:	795b      	ldrb	r3, [r3, #5]
 80026cc:	021b      	lsls	r3, r3, #8
 80026ce:	b21a      	sxth	r2, r3
 80026d0:	4b03      	ldr	r3, [pc, #12]	; (80026e0 <main+0x8c>)
 80026d2:	791b      	ldrb	r3, [r3, #4]
 80026d4:	b21b      	sxth	r3, r3
 80026d6:	4313      	orrs	r3, r2
 80026d8:	b21a      	sxth	r2, r3
 80026da:	4b05      	ldr	r3, [pc, #20]	; (80026f0 <main+0x9c>)
 80026dc:	801a      	strh	r2, [r3, #0]
	  HAL_I2C_Mem_Read(&hi2c1, ADXL_SLAVE_ADRESS, 0x32, 1, myDatas, 6, 100);
 80026de:	e7d1      	b.n	8002684 <main+0x30>
 80026e0:	2000008c 	.word	0x2000008c
 80026e4:	20000038 	.word	0x20000038
 80026e8:	20000034 	.word	0x20000034
 80026ec:	20000094 	.word	0x20000094
 80026f0:	20000092 	.word	0x20000092

080026f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b094      	sub	sp, #80	; 0x50
 80026f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026fa:	f107 0320 	add.w	r3, r7, #32
 80026fe:	2230      	movs	r2, #48	; 0x30
 8002700:	2100      	movs	r1, #0
 8002702:	4618      	mov	r0, r3
 8002704:	f000 f9f8 	bl	8002af8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002708:	f107 030c 	add.w	r3, r7, #12
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	605a      	str	r2, [r3, #4]
 8002712:	609a      	str	r2, [r3, #8]
 8002714:	60da      	str	r2, [r3, #12]
 8002716:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002718:	2300      	movs	r3, #0
 800271a:	60bb      	str	r3, [r7, #8]
 800271c:	4a28      	ldr	r2, [pc, #160]	; (80027c0 <SystemClock_Config+0xcc>)
 800271e:	4b28      	ldr	r3, [pc, #160]	; (80027c0 <SystemClock_Config+0xcc>)
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002726:	6413      	str	r3, [r2, #64]	; 0x40
 8002728:	4b25      	ldr	r3, [pc, #148]	; (80027c0 <SystemClock_Config+0xcc>)
 800272a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002730:	60bb      	str	r3, [r7, #8]
 8002732:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002734:	2300      	movs	r3, #0
 8002736:	607b      	str	r3, [r7, #4]
 8002738:	4a22      	ldr	r2, [pc, #136]	; (80027c4 <SystemClock_Config+0xd0>)
 800273a:	4b22      	ldr	r3, [pc, #136]	; (80027c4 <SystemClock_Config+0xd0>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002742:	6013      	str	r3, [r2, #0]
 8002744:	4b1f      	ldr	r3, [pc, #124]	; (80027c4 <SystemClock_Config+0xd0>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800274c:	607b      	str	r3, [r7, #4]
 800274e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002750:	2302      	movs	r3, #2
 8002752:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002754:	2301      	movs	r3, #1
 8002756:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002758:	2310      	movs	r3, #16
 800275a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800275c:	2302      	movs	r3, #2
 800275e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002760:	2300      	movs	r3, #0
 8002762:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002764:	2308      	movs	r3, #8
 8002766:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002768:	23a8      	movs	r3, #168	; 0xa8
 800276a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800276c:	2302      	movs	r3, #2
 800276e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002770:	2304      	movs	r3, #4
 8002772:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002774:	f107 0320 	add.w	r3, r7, #32
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff faa5 	bl	8001cc8 <HAL_RCC_OscConfig>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002784:	f000 f8ae 	bl	80028e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002788:	230f      	movs	r3, #15
 800278a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800278c:	2302      	movs	r3, #2
 800278e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002790:	2300      	movs	r3, #0
 8002792:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002794:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002798:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800279a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800279e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80027a0:	f107 030c 	add.w	r3, r7, #12
 80027a4:	2105      	movs	r1, #5
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff fcfe 	bl	80021a8 <HAL_RCC_ClockConfig>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80027b2:	f000 f897 	bl	80028e4 <Error_Handler>
  }
}
 80027b6:	bf00      	nop
 80027b8:	3750      	adds	r7, #80	; 0x50
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	40023800 	.word	0x40023800
 80027c4:	40007000 	.word	0x40007000

080027c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80027cc:	4b12      	ldr	r3, [pc, #72]	; (8002818 <MX_I2C1_Init+0x50>)
 80027ce:	4a13      	ldr	r2, [pc, #76]	; (800281c <MX_I2C1_Init+0x54>)
 80027d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80027d2:	4b11      	ldr	r3, [pc, #68]	; (8002818 <MX_I2C1_Init+0x50>)
 80027d4:	4a12      	ldr	r2, [pc, #72]	; (8002820 <MX_I2C1_Init+0x58>)
 80027d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80027d8:	4b0f      	ldr	r3, [pc, #60]	; (8002818 <MX_I2C1_Init+0x50>)
 80027da:	2200      	movs	r2, #0
 80027dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80027de:	4b0e      	ldr	r3, [pc, #56]	; (8002818 <MX_I2C1_Init+0x50>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027e4:	4b0c      	ldr	r3, [pc, #48]	; (8002818 <MX_I2C1_Init+0x50>)
 80027e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80027ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80027ec:	4b0a      	ldr	r3, [pc, #40]	; (8002818 <MX_I2C1_Init+0x50>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80027f2:	4b09      	ldr	r3, [pc, #36]	; (8002818 <MX_I2C1_Init+0x50>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027f8:	4b07      	ldr	r3, [pc, #28]	; (8002818 <MX_I2C1_Init+0x50>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027fe:	4b06      	ldr	r3, [pc, #24]	; (8002818 <MX_I2C1_Init+0x50>)
 8002800:	2200      	movs	r2, #0
 8002802:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002804:	4804      	ldr	r0, [pc, #16]	; (8002818 <MX_I2C1_Init+0x50>)
 8002806:	f7fe f993 	bl	8000b30 <HAL_I2C_Init>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002810:	f000 f868 	bl	80028e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002814:	bf00      	nop
 8002816:	bd80      	pop	{r7, pc}
 8002818:	20000038 	.word	0x20000038
 800281c:	40005400 	.word	0x40005400
 8002820:	00061a80 	.word	0x00061a80

08002824 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b08a      	sub	sp, #40	; 0x28
 8002828:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800282a:	f107 0314 	add.w	r3, r7, #20
 800282e:	2200      	movs	r2, #0
 8002830:	601a      	str	r2, [r3, #0]
 8002832:	605a      	str	r2, [r3, #4]
 8002834:	609a      	str	r2, [r3, #8]
 8002836:	60da      	str	r2, [r3, #12]
 8002838:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800283a:	2300      	movs	r3, #0
 800283c:	613b      	str	r3, [r7, #16]
 800283e:	4a27      	ldr	r2, [pc, #156]	; (80028dc <MX_GPIO_Init+0xb8>)
 8002840:	4b26      	ldr	r3, [pc, #152]	; (80028dc <MX_GPIO_Init+0xb8>)
 8002842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002848:	6313      	str	r3, [r2, #48]	; 0x30
 800284a:	4b24      	ldr	r3, [pc, #144]	; (80028dc <MX_GPIO_Init+0xb8>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002852:	613b      	str	r3, [r7, #16]
 8002854:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002856:	2300      	movs	r3, #0
 8002858:	60fb      	str	r3, [r7, #12]
 800285a:	4a20      	ldr	r2, [pc, #128]	; (80028dc <MX_GPIO_Init+0xb8>)
 800285c:	4b1f      	ldr	r3, [pc, #124]	; (80028dc <MX_GPIO_Init+0xb8>)
 800285e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002860:	f043 0308 	orr.w	r3, r3, #8
 8002864:	6313      	str	r3, [r2, #48]	; 0x30
 8002866:	4b1d      	ldr	r3, [pc, #116]	; (80028dc <MX_GPIO_Init+0xb8>)
 8002868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286a:	f003 0308 	and.w	r3, r3, #8
 800286e:	60fb      	str	r3, [r7, #12]
 8002870:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002872:	2300      	movs	r3, #0
 8002874:	60bb      	str	r3, [r7, #8]
 8002876:	4a19      	ldr	r2, [pc, #100]	; (80028dc <MX_GPIO_Init+0xb8>)
 8002878:	4b18      	ldr	r3, [pc, #96]	; (80028dc <MX_GPIO_Init+0xb8>)
 800287a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287c:	f043 0301 	orr.w	r3, r3, #1
 8002880:	6313      	str	r3, [r2, #48]	; 0x30
 8002882:	4b16      	ldr	r3, [pc, #88]	; (80028dc <MX_GPIO_Init+0xb8>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	60bb      	str	r3, [r7, #8]
 800288c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800288e:	2300      	movs	r3, #0
 8002890:	607b      	str	r3, [r7, #4]
 8002892:	4a12      	ldr	r2, [pc, #72]	; (80028dc <MX_GPIO_Init+0xb8>)
 8002894:	4b11      	ldr	r3, [pc, #68]	; (80028dc <MX_GPIO_Init+0xb8>)
 8002896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002898:	f043 0302 	orr.w	r3, r3, #2
 800289c:	6313      	str	r3, [r2, #48]	; 0x30
 800289e:	4b0f      	ldr	r3, [pc, #60]	; (80028dc <MX_GPIO_Init+0xb8>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	607b      	str	r3, [r7, #4]
 80028a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80028aa:	2200      	movs	r2, #0
 80028ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028b0:	480b      	ldr	r0, [pc, #44]	; (80028e0 <MX_GPIO_Init+0xbc>)
 80028b2:	f7fe f923 	bl	8000afc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80028b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028bc:	2301      	movs	r3, #1
 80028be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c0:	2300      	movs	r3, #0
 80028c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c4:	2300      	movs	r3, #0
 80028c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028c8:	f107 0314 	add.w	r3, r7, #20
 80028cc:	4619      	mov	r1, r3
 80028ce:	4804      	ldr	r0, [pc, #16]	; (80028e0 <MX_GPIO_Init+0xbc>)
 80028d0:	f7fd ff7a 	bl	80007c8 <HAL_GPIO_Init>

}
 80028d4:	bf00      	nop
 80028d6:	3728      	adds	r7, #40	; 0x28
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	40023800 	.word	0x40023800
 80028e0:	40020c00 	.word	0x40020c00

080028e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80028e8:	bf00      	nop
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
	...

080028f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028fa:	2300      	movs	r3, #0
 80028fc:	607b      	str	r3, [r7, #4]
 80028fe:	4a10      	ldr	r2, [pc, #64]	; (8002940 <HAL_MspInit+0x4c>)
 8002900:	4b0f      	ldr	r3, [pc, #60]	; (8002940 <HAL_MspInit+0x4c>)
 8002902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002904:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002908:	6453      	str	r3, [r2, #68]	; 0x44
 800290a:	4b0d      	ldr	r3, [pc, #52]	; (8002940 <HAL_MspInit+0x4c>)
 800290c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002912:	607b      	str	r3, [r7, #4]
 8002914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002916:	2300      	movs	r3, #0
 8002918:	603b      	str	r3, [r7, #0]
 800291a:	4a09      	ldr	r2, [pc, #36]	; (8002940 <HAL_MspInit+0x4c>)
 800291c:	4b08      	ldr	r3, [pc, #32]	; (8002940 <HAL_MspInit+0x4c>)
 800291e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002924:	6413      	str	r3, [r2, #64]	; 0x40
 8002926:	4b06      	ldr	r3, [pc, #24]	; (8002940 <HAL_MspInit+0x4c>)
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800292e:	603b      	str	r3, [r7, #0]
 8002930:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	40023800 	.word	0x40023800

08002944 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b08a      	sub	sp, #40	; 0x28
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800294c:	f107 0314 	add.w	r3, r7, #20
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	605a      	str	r2, [r3, #4]
 8002956:	609a      	str	r2, [r3, #8]
 8002958:	60da      	str	r2, [r3, #12]
 800295a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a19      	ldr	r2, [pc, #100]	; (80029c8 <HAL_I2C_MspInit+0x84>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d12b      	bne.n	80029be <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002966:	2300      	movs	r3, #0
 8002968:	613b      	str	r3, [r7, #16]
 800296a:	4a18      	ldr	r2, [pc, #96]	; (80029cc <HAL_I2C_MspInit+0x88>)
 800296c:	4b17      	ldr	r3, [pc, #92]	; (80029cc <HAL_I2C_MspInit+0x88>)
 800296e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002970:	f043 0302 	orr.w	r3, r3, #2
 8002974:	6313      	str	r3, [r2, #48]	; 0x30
 8002976:	4b15      	ldr	r3, [pc, #84]	; (80029cc <HAL_I2C_MspInit+0x88>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	613b      	str	r3, [r7, #16]
 8002980:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002982:	23c0      	movs	r3, #192	; 0xc0
 8002984:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002986:	2312      	movs	r3, #18
 8002988:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800298a:	2301      	movs	r3, #1
 800298c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800298e:	2303      	movs	r3, #3
 8002990:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002992:	2304      	movs	r3, #4
 8002994:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002996:	f107 0314 	add.w	r3, r7, #20
 800299a:	4619      	mov	r1, r3
 800299c:	480c      	ldr	r0, [pc, #48]	; (80029d0 <HAL_I2C_MspInit+0x8c>)
 800299e:	f7fd ff13 	bl	80007c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80029a2:	2300      	movs	r3, #0
 80029a4:	60fb      	str	r3, [r7, #12]
 80029a6:	4a09      	ldr	r2, [pc, #36]	; (80029cc <HAL_I2C_MspInit+0x88>)
 80029a8:	4b08      	ldr	r3, [pc, #32]	; (80029cc <HAL_I2C_MspInit+0x88>)
 80029aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029b0:	6413      	str	r3, [r2, #64]	; 0x40
 80029b2:	4b06      	ldr	r3, [pc, #24]	; (80029cc <HAL_I2C_MspInit+0x88>)
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80029be:	bf00      	nop
 80029c0:	3728      	adds	r7, #40	; 0x28
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	40005400 	.word	0x40005400
 80029cc:	40023800 	.word	0x40023800
 80029d0:	40020400 	.word	0x40020400

080029d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80029d8:	bf00      	nop
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr

080029e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029e2:	b480      	push	{r7}
 80029e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029e6:	e7fe      	b.n	80029e6 <HardFault_Handler+0x4>

080029e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029ec:	e7fe      	b.n	80029ec <MemManage_Handler+0x4>

080029ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029ee:	b480      	push	{r7}
 80029f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029f2:	e7fe      	b.n	80029f2 <BusFault_Handler+0x4>

080029f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029f8:	e7fe      	b.n	80029f8 <UsageFault_Handler+0x4>

080029fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029fa:	b480      	push	{r7}
 80029fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029fe:	bf00      	nop
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a0c:	bf00      	nop
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr

08002a16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a16:	b480      	push	{r7}
 8002a18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a1a:	bf00      	nop
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a28:	f7fd fda8 	bl	800057c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a2c:	bf00      	nop
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a34:	4a08      	ldr	r2, [pc, #32]	; (8002a58 <SystemInit+0x28>)
 8002a36:	4b08      	ldr	r3, [pc, #32]	; (8002a58 <SystemInit+0x28>)
 8002a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002a44:	4b04      	ldr	r3, [pc, #16]	; (8002a58 <SystemInit+0x28>)
 8002a46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a4a:	609a      	str	r2, [r3, #8]
#endif
}
 8002a4c:	bf00      	nop
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	e000ed00 	.word	0xe000ed00

08002a5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002a5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a94 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002a60:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002a62:	e003      	b.n	8002a6c <LoopCopyDataInit>

08002a64 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002a64:	4b0c      	ldr	r3, [pc, #48]	; (8002a98 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002a66:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002a68:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002a6a:	3104      	adds	r1, #4

08002a6c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002a6c:	480b      	ldr	r0, [pc, #44]	; (8002a9c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002a6e:	4b0c      	ldr	r3, [pc, #48]	; (8002aa0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002a70:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002a72:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002a74:	d3f6      	bcc.n	8002a64 <CopyDataInit>
  ldr  r2, =_sbss
 8002a76:	4a0b      	ldr	r2, [pc, #44]	; (8002aa4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002a78:	e002      	b.n	8002a80 <LoopFillZerobss>

08002a7a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002a7a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002a7c:	f842 3b04 	str.w	r3, [r2], #4

08002a80 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002a80:	4b09      	ldr	r3, [pc, #36]	; (8002aa8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002a82:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002a84:	d3f9      	bcc.n	8002a7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a86:	f7ff ffd3 	bl	8002a30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a8a:	f000 f811 	bl	8002ab0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a8e:	f7ff fde1 	bl	8002654 <main>
  bx  lr    
 8002a92:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002a94:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002a98:	08002b48 	.word	0x08002b48
  ldr  r0, =_sdata
 8002a9c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002aa0:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002aa4:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002aa8:	20000098 	.word	0x20000098

08002aac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002aac:	e7fe      	b.n	8002aac <ADC_IRQHandler>
	...

08002ab0 <__libc_init_array>:
 8002ab0:	b570      	push	{r4, r5, r6, lr}
 8002ab2:	4e0d      	ldr	r6, [pc, #52]	; (8002ae8 <__libc_init_array+0x38>)
 8002ab4:	4c0d      	ldr	r4, [pc, #52]	; (8002aec <__libc_init_array+0x3c>)
 8002ab6:	1ba4      	subs	r4, r4, r6
 8002ab8:	10a4      	asrs	r4, r4, #2
 8002aba:	2500      	movs	r5, #0
 8002abc:	42a5      	cmp	r5, r4
 8002abe:	d109      	bne.n	8002ad4 <__libc_init_array+0x24>
 8002ac0:	4e0b      	ldr	r6, [pc, #44]	; (8002af0 <__libc_init_array+0x40>)
 8002ac2:	4c0c      	ldr	r4, [pc, #48]	; (8002af4 <__libc_init_array+0x44>)
 8002ac4:	f000 f820 	bl	8002b08 <_init>
 8002ac8:	1ba4      	subs	r4, r4, r6
 8002aca:	10a4      	asrs	r4, r4, #2
 8002acc:	2500      	movs	r5, #0
 8002ace:	42a5      	cmp	r5, r4
 8002ad0:	d105      	bne.n	8002ade <__libc_init_array+0x2e>
 8002ad2:	bd70      	pop	{r4, r5, r6, pc}
 8002ad4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ad8:	4798      	blx	r3
 8002ada:	3501      	adds	r5, #1
 8002adc:	e7ee      	b.n	8002abc <__libc_init_array+0xc>
 8002ade:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ae2:	4798      	blx	r3
 8002ae4:	3501      	adds	r5, #1
 8002ae6:	e7f2      	b.n	8002ace <__libc_init_array+0x1e>
 8002ae8:	08002b40 	.word	0x08002b40
 8002aec:	08002b40 	.word	0x08002b40
 8002af0:	08002b40 	.word	0x08002b40
 8002af4:	08002b44 	.word	0x08002b44

08002af8 <memset>:
 8002af8:	4402      	add	r2, r0
 8002afa:	4603      	mov	r3, r0
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d100      	bne.n	8002b02 <memset+0xa>
 8002b00:	4770      	bx	lr
 8002b02:	f803 1b01 	strb.w	r1, [r3], #1
 8002b06:	e7f9      	b.n	8002afc <memset+0x4>

08002b08 <_init>:
 8002b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b0a:	bf00      	nop
 8002b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b0e:	bc08      	pop	{r3}
 8002b10:	469e      	mov	lr, r3
 8002b12:	4770      	bx	lr

08002b14 <_fini>:
 8002b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b16:	bf00      	nop
 8002b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b1a:	bc08      	pop	{r3}
 8002b1c:	469e      	mov	lr, r3
 8002b1e:	4770      	bx	lr
